[
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#target-audience-unclear",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#target-audience-unclear",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Target Audience Unclear",
    "text": "Target Audience Unclear\n\nIf you are a footy fan this article will likely present as some mildy interesting footy facts, combined with incomprehensible techno-babble. For R users this will likely appear to be a fairly elementary data wrangling exercise, combined with a bunch of references you don’t understand. But if you are both a footy fan and an R user, it will hopefully prove to be a quite interesting read."
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#question-list",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#question-list",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Question List",
    "text": "Question List\nThis article aims to tackle the questions listed below:\n\n\nWhat is the record for the highest scoring quarter?\nWhat is the record for the most individual goal kickers in a single game?\nWhat is the record for the most multiple goal kickers in a single game?\nWhat is the record for the most players kicking five or more goals in a single game (i.e. the most “bags”)?\nWhat is the record for the most clangers in a game?\nWhat is the record for the worst disposal efficiency in a game?\nHas anyone won a Norm Smith Medal in their first season in the AFL?\nWhat is the record for the most unanswered goals in a game?*\nWhat is the school with the most AFL players on their list?*\nWhat city/town has the most AFL players relative to population?*\nWhich player has the best goals to behinds ratio?*\nHave there ever been any undefeated seasons?*\nWhat is the worst win-loss record to make finals?*\n\n\n\n\n\n\n\n\nDisclaimer on the asterisk\n\n\n\nI have put an asterisk next to questions that either:\n\ncannot easily be answered by the methods I discuss below; or\nare too lengthy for this blog post (these may get their own dedicated blog post in the future).\n\nThe remaining questions (which have hyperlinks to later sections of this article) will be tackled using R below.\n\n\nIf you are only really interested in the answers (and not the R coding), you can jump ahead by clicking here."
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#the-fitzroy-package",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#the-fitzroy-package",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "The fitzRoy Package",
    "text": "The fitzRoy Package\nThe first step in analysing AFL data is obtaining the data (“collection”). Our first thought might be to search the web for publicly available AFL datasets and APIs or even scrape the data from websites such as the official AFL website, Footywire or AFL Tables. But there is a more straight-forward way.\nWhile most people now know Fitzroy as a trendy inner city suburb of Melbourne, filled with terraces and over-priced croissants, it was once home10 to the mighty (and now merged out of existence) Fitzroy Lions Football Club.10 It is also (regrettably) the place of my birth but as a WA boy I don’t like to talk about the fact that my parents happened to be in Melbourne when I was born.\n\n\n\n\nWe can obtain the data we need very simply using its name-sake, the fitzRoy R package. It abstracts away all the web scraping and API calls for us into a very helpful family of fetch_* functions.\nSo let’s begin by loading the fitzRoy package and while we’re at it, I will also load all the other packages I will be using.\n\nlibrary(fitzRoy)\n\n# Note that I generally avoid mixing dplyr and data.table at the same time\n#   but the reason I have done with will become apparent later\nlibrary(dplyr)\nlibrary(data.table)\n\nlibrary(rvest)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(purrr)\n\nlibrary(reactable)\n\n\nfitzRoy Data Sources\nfitzRoy provides access to a number of footy data sources11 including AFL Tables and the official AFL website. Each data source has its own advantages and disadvantages, for example:11 Up-to-date information on data sources can be found on fitzRoy’s documentation site\n\nAFL Tables has the entirety of AFL/VFL history (1897 to present) but lacks some of the more advanced stats.\nThe official AFL website only has data from 2014 onwards but it also probably the most complete in terms of the advanced statistics it contains (e.g. centre bounce attendances12).\n\n12 Centre bounce attendances (CBAs) are a commonly-used metrics in AFL fantasy, coaches often look at tools such as this one to help with researching their trades.Where possible we will use the AFL Tables data set as it has the full history of the AFL on it. However if we require stats that it is missing, we will simply have to adopt a different data source and caveat it by saying it is only for a subset of the full history of the competition.\n\n\n\n\n\n\n\n\nThe fetch_* family of functions from the fitzRoy package allow us to read the package. Consult the documentation site for a complete list of all the available functions.\nFor the purposes of the questions listed above we will be using the full history of the AFL (1897 to present) using AFL Tables as a data source. We will also need disposal efficiency stats which are a more advanced statistic only available on the data from the official AFL Website and therefore only available from 2014 onwards.\nWe can fetch this data via fitzRoy with the following code:\n\n# AFL Tables has data for the full history of the AFL\nplayer_stats &lt;- fetch_player_stats_afltables(season = 1897:2023)\nresults &lt;- fetch_results_afltables(season = 1897:2023)\n# AFL.com.au data only goes back to 2014\nplayer_stats_afl_official &lt;-  map_dfr(2014:2023, fetch_player_stats_afl)\n\nNote that in the code above we have to use a map_dfr to get data for multuple seasons, that is because the function will only do one season at a time, whereas we can obtain the AFL Tables all in one go with a vector of years. The reason for this is that the fetch_player_stats_afl uses an API to get the data where as fetch_player_stats_afl_tables function pulls the data from a GitHub repository{target = “_blank”} where data obtained from a scraping script is automatically run over night via GitHub actions (a clever solution to prevent the actual site from being overloaded from too many scraping requests). This also means the fetch_player_stats_afl will be as at right now whereas fetch_player_stats_afl_tables data is updated as at the last time the code to scrape the data was run and AFL Tables updated their website. This also renders the fetch_player_stats_afl function slower than the fetch_player_stats_afl_tables as it actually has to hit an api and then perform some data manipulations as opposed to merely pulling data directly from GitHub storage.\n\n\n\n\n\n\nBeing a good citizen\n\n\n\nWhen sourcing data from fitzRoy, it is important to follow good data collection13 etiquette by only downloading the data you need and avoiding repeatedly downloading the same data over and over again. This prevents servers being overloaded and will mean everyone will get their data faster.\nIn keeping with this, for the purposes of this blog post, I have saved the data in a local RDS file instead of repeatedly calling the fetch_* functions, I use readRDS(). The code for this is below (and the code above is not actually run but is cleaner for demonstration purposes):\n\nif(file.exists(\"data/player_stats.RDS\")) {\n  player_stats &lt;- readRDS(\"data/player_stats.RDS\")\n  \n} else {\n  player_stats &lt;- fitzRoy::fetch_player_stats_afltables(season = 1897:2023)\n  saveRDS(player_stats, \"data/player_stats.RDS\")\n}\n\nif(file.exists(\"data/results.RDS\")) {\n  results &lt;- readRDS(\"data/results.RDS\")\n  \n} else {\n  results &lt;- fitzRoy::fetch_results_afltables(season = 1897:2023)\n  saveRDS(results, \"data/results.RDS\")\n}\n\nif(file.exists(\"data/player_stats_afl_official.RDS\")) {\n  player_stats_afl_official &lt;- readRDS(\"data/player_stats_afl_official.RDS\")\n  \n} else {\n  player_stats_afl_official &lt;-  map_dfr(2014:2023, fetch_player_stats_afl)\n  saveRDS(player_stats_afl_official, \"data/player_stats_afl_official.RDS\")\n}\n\n\n\n13 this topic is discussed on the fitzRoy documentation site hereThe data we have read in is as at round R tail(player_stats$Round, 1) of the R tail(player_stats$Season, 1) AFL season."
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#finicky-details-about-other-r-packages",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#finicky-details-about-other-r-packages",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Finicky Details About Other R Packages",
    "text": "Finicky Details About Other R Packages\nTidyverse Versus data.table\n\nIn the R community, there is an ongoing power struggle between using the Posit14-backed tidyverse and the heavily-optimised data.table.14 formally known as RStudio (RIP)\nAs to not unsettle people who prefer either dplyr (and the tidyverse) or data.table, I have written code in both packages as to not alienate anyone15. Where relevant, I have used a tabbed layout for the convenience of the reader. As my personal preference for readability purposes is the tidyverse16, I will place this code in the first tab.15 note that I have not written a base R dataframes version because I can see arguments for using both tidyverse and data.table but base R data.frames will probably cause more pain than they are worth (there is a reason that tidyverse and data.table exist)16 I will typically will only use data.table if the size of data necessitates it. In this case, the data is less than a million rows so there are no problems.\n\n\nTidyverse\ndata.table\n\n\n\nNote that the code below is somewhat redundant as the fitzRoy package follows the tidyverse philosophy and returns tibbles. However this is add the _tb suffix17 to distinguish it from the data.table code.17 an abbreviation of “tibble”\n\nplayer_stats_tb &lt;- as_tibble(player_stats)\nresults_tb &lt;- as_tibble(results)\nplayer_stats_afl_official_tb &lt;- as_tibble(player_stats_afl_official)\n\n\n\nHenceforth, all data.table code will use the _dt suffix18 as to distinguish it from the tidyverse code.18 an acronym of “data.table”\n\nplayer_stats_dt &lt;- as.data.table(player_stats)\nresults_dt &lt;- as.data.table(results)\nplayer_stats_afl_official_dt &lt;- as.data.table(player_stats_afl_official)\n\n\n\n\nAdoption of the Native Pipe Operator (|&gt;)\nThe so-called pipe operator (%&gt;%) of the magrittr package has been a core staple of tidyverse since its inception but since the R core team introduced the so-called native pipe (|&gt;) to base R (in version 4.119), this has led to a split in adoption. There are some nuances in its usage20 but it overall behaves in a similar way to the magrittr pipe and has less overhead (and is therefore faster). While the native pipe was initially missing some of the key features of the magrittr pipe, new features21 have been added to it that (in my mind) mean that it might have even surpassed the magrittr pipe.19 another cool thing introduced in this version of R was so-called function shorthand (\\()), see help(\"function\") for more details20 I may even cover these in a future blog post21 In R version 4.2, the _ symbol was added as a placeholder character and in R version 4.3, extractions using the $ symbol are now allowed\nWhile I have tried to appease people in both the tidyverse and data.table camps, I will not be re-writing my code more than once with such as minor syntactic difference as the pipe I use. I will therefore be dragging all my tidyverse-using readers kicking and screaming into the R 4.1 world by adopting the native pipe (|&gt;) in my tidyverse code.\n\nNote that the common RStudio shortcut, Ctrl+Shift+M can be changed from the magrittr pipe (%&gt;%), which is still the default, to the native pipe (|&gt;).\n\nWebscraping package\nWhile the majority of our data will be sourced using the fitzRoy package, a small amount of data (namely Norm Smith medalists, which are outside of the scope of fitzRoy) will require us to perform some bespoke web scraping. This will be performed using the rvest package (loaded above)."
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#flattening-the-data",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#flattening-the-data",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Flattening the Data",
    "text": "Flattening the Data\nTo begin with, let’s scrutinise the results data in order to figure out what we have to work with.\n\nstr(results)\n\ntibble [16,352 × 16] (S3: tbl_df/tbl/data.frame)\n $ Game        : num [1:16352] 1 2 3 4 5 6 7 8 9 10 ...\n $ Date        : Date[1:16352], format: \"1897-05-08\" \"1897-05-08\" ...\n $ Round       : chr [1:16352] \"R1\" \"R1\" \"R1\" \"R1\" ...\n $ Home.Team   : chr [1:16352] \"Fitzroy\" \"Collingwood\" \"Geelong\" \"Sydney\" ...\n $ Home.Goals  : int [1:16352] 6 5 3 3 6 4 3 9 6 5 ...\n $ Home.Behinds: int [1:16352] 13 11 6 9 4 6 8 10 5 9 ...\n $ Home.Points : int [1:16352] 49 41 24 27 40 30 26 64 41 39 ...\n $ Away.Team   : chr [1:16352] \"Carlton\" \"St Kilda\" \"Essendon\" \"Melbourne\" ...\n $ Away.Goals  : int [1:16352] 2 2 7 6 5 8 10 3 5 7 ...\n $ Away.Behinds: int [1:16352] 4 4 5 8 6 2 6 1 7 8 ...\n $ Away.Points : int [1:16352] 16 16 47 44 36 50 66 19 37 50 ...\n $ Venue       : chr [1:16352] \"Brunswick St\" \"Victoria Park\" \"Corio Oval\" \"Lake Oval\" ...\n $ Margin      : int [1:16352] 33 25 -23 -17 4 -20 -40 45 4 -11 ...\n $ Season      : num [1:16352] 1897 1897 1897 1897 1897 ...\n $ Round.Type  : chr [1:16352] \"Regular\" \"Regular\" \"Regular\" \"Regular\" ...\n $ Round.Number: int [1:16352] 1 1 1 1 2 2 2 2 3 3 ...\n\n\nWhile inspecting the results we may note that certain key match-level information (e.g. quarter-by-quarter scores) for answering some of our question is missing from it. As it turns out, this data is actually available on the player_stats_afl_tables data (one row per player per match) instead. Thus, we will opt to create a ‘flattened’ version of player_stats_afl_tables with all the match-level fields available to us on both datasets and discard the results dataset (save for some quick checks to make sure the player data ‘flattening’ worked as expected).\nNow, let’s take a look at the player_stats_afl_tables dataset to determine which fields are player-level and which are match-level.\n\n\nCode\nOutput\n\n\n\n\nstr(player_stats)\n\nNote that the output has been placed into another tab as it is rather long.\n\n\n\n\ntibble [663,115 × 59] (S3: tbl_df/tbl/data.frame)\n $ Season                 : num [1:663115] 1897 1897 1897 1897 1897 ...\n $ Round                  : chr [1:663115] \"1\" \"1\" \"1\" \"1\" ...\n $ Date                   : Date[1:663115], format: \"1897-05-08\" \"1897-05-08\" ...\n $ Local.start.time       : int [1:663115] 1500 1500 1500 1500 1500 1500 1500 1500 1500 1500 ...\n $ Venue                  : chr [1:663115] \"Brunswick St\" \"Brunswick St\" \"Brunswick St\" \"Brunswick St\" ...\n $ Attendance             : num [1:663115] 3000 3000 3000 3000 3000 3000 3000 3000 3000 3000 ...\n $ Home.team              : chr [1:663115] \"Fitzroy\" \"Fitzroy\" \"Fitzroy\" \"Fitzroy\" ...\n $ HQ1G                   : int [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ HQ1B                   : int [1:663115] 5 5 5 5 5 5 5 5 5 5 ...\n $ HQ2G                   : int [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ HQ2B                   : int [1:663115] 11 11 11 11 11 11 11 11 11 11 ...\n $ HQ3G                   : int [1:663115] 5 5 5 5 5 5 5 5 5 5 ...\n $ HQ3B                   : int [1:663115] 13 13 13 13 13 13 13 13 13 13 ...\n $ HQ4G                   : int [1:663115] 6 6 6 6 6 6 6 6 6 6 ...\n $ HQ4B                   : int [1:663115] 13 13 13 13 13 13 13 13 13 13 ...\n $ Home.score             : int [1:663115] 49 49 49 49 49 49 49 49 49 49 ...\n $ Away.team              : chr [1:663115] \"Carlton\" \"Carlton\" \"Carlton\" \"Carlton\" ...\n $ AQ1G                   : int [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ AQ1B                   : int [1:663115] 3 3 3 3 3 3 3 3 3 3 ...\n $ AQ2G                   : int [1:663115] 1 1 1 1 1 1 1 1 1 1 ...\n $ AQ2B                   : int [1:663115] 3 3 3 3 3 3 3 3 3 3 ...\n $ AQ3G                   : int [1:663115] 2 2 2 2 2 2 2 2 2 2 ...\n $ AQ3B                   : int [1:663115] 3 3 3 3 3 3 3 3 3 3 ...\n $ AQ4G                   : int [1:663115] 2 2 2 2 2 2 2 2 2 2 ...\n $ AQ4B                   : int [1:663115] 4 4 4 4 4 4 4 4 4 4 ...\n $ Away.score             : int [1:663115] 16 16 16 16 16 16 16 16 16 16 ...\n $ First.name             : chr [1:663115] \"Bill\" \"Jimmy\" \"Bob\" \"Tom\" ...\n $ Surname                : chr [1:663115] \"Ahern\" \"Aitken\" \"Armstrong\" \"Blake\" ...\n $ ID                     : num [1:663115] 4415 4416 4417 4419 4421 ...\n $ Jumper.No.             : chr [1:663115] \"0\" \"0\" \"0\" \"0\" ...\n $ Playing.for            : chr [1:663115] \"Carlton\" \"Carlton\" \"Carlton\" \"Carlton\" ...\n $ Kicks                  : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Marks                  : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Handballs              : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Goals                  : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Behinds                : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Hit.Outs               : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Tackles                : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Rebounds               : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Inside.50s             : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Clearances             : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Clangers               : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Frees.For              : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Frees.Against          : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Brownlow.Votes         : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Contested.Possessions  : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Uncontested.Possessions: num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Contested.Marks        : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Marks.Inside.50        : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ One.Percenters         : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Bounces                : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Goal.Assists           : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Time.on.Ground..       : num [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Substitute             : int [1:663115] 0 0 0 0 0 0 0 0 0 0 ...\n $ Umpire.1               : chr [1:663115] \"Samuel Hood\" \"Samuel Hood\" \"Samuel Hood\" \"Samuel Hood\" ...\n $ Umpire.2               : chr [1:663115] \"\" \"\" \"\" \"\" ...\n $ Umpire.3               : chr [1:663115] \"\" \"\" \"\" \"\" ...\n $ Umpire.4               : chr [1:663115] \"\" \"\" \"\" \"\" ...\n $ group_id               : int [1:663115] 2 2 2 2 2 2 2 2 2 2 ...\n\n\n\n\n\nInspecting the fields and using some knowledge of the game, we can determine that the following fields are player-level:\n\nplayer_level_fields &lt;- c(\n  \"First.name\", \"Surname\", \"ID\", \"Jumper.No.\", \"Playing.for\", \"Kicks\", \"Marks\", \n  \"Handballs\", \"Goals\", \"Behinds\", \"Hit.Outs\", \"Tackles\", \"Rebounds\", \"Inside.50s\", \n  \"Clearances\", \"Clangers\", \"Frees.For\", \"Frees.Against\", \"Brownlow.Votes\", \n  \"Contested.Possessions\", \"Uncontested.Possessions\", \"Contested.Marks\", \n  \"Marks.Inside.50\", \"One.Percenters\", \"Bounces\", \"Goal.Assists\", \"Time.on.Ground..\",\n  \"Substitute\"\n  )\n\nmatch_level_fields &lt;- setdiff(colnames(player_stats), player_level_fields)\n\nWe can now safely group and aggregate by the match_level_fields below:\n\n\nTidyverse\ndata.table\n\n\n\n\nplayer_stats_tb |&gt; \n  mutate(\n    home_player = Playing.for == Home.team,\n    away_player = Playing.for == Away.team\n  ) |&gt; \n  group_by(pick(all_of(match_level_fields))) |&gt; \n  summarise(\n    player_count = n(),\n    home_kicks = sum(Kicks * home_player),\n    away_kicks = sum(Kicks * away_player),\n    home_marks = sum(Marks * home_player),\n    away_marks = sum(Marks * away_player),\n    home_handballs = sum(Handballs * home_player),\n    away_handballs = sum(Handballs * away_player),\n    home_hit_outs = sum(Hit.Outs * home_player),\n    away_hit_outs = sum(Hit.Outs * away_player),\n    home_tackles = sum(Tackles * home_player),\n    away_tackles = sum(Tackles * away_player),\n    home_rebounds = sum(Rebounds * home_player),\n    away_rebounds = sum(Rebounds * away_player),\n    home_inside_50s = sum(Inside.50s * home_player),\n    away_inside_50s = sum(Inside.50s * away_player),\n    home_clearances = sum(Clearances * home_player),\n    away_clearances = sum(Clearances * away_player),\n    home_clangers = sum(Clangers * home_player),\n    away_clangers = sum(Clangers * away_player),\n    home_frees_for = sum(Frees.For * home_player),\n    away_frees_for = sum(Frees.For * away_player),\n    home_frees_against = sum(Frees.Against * home_player),\n    away_frees_against = sum(Frees.Against * away_player),\n    home_contested_possessions = sum(Contested.Possessions * home_player),\n    away_contested_possessions = sum(Contested.Possessions * away_player),\n    home_uncontested_possessions = sum(Uncontested.Possessions * home_player),\n    away_uncontested_possessions = sum(Uncontested.Possessions * away_player),\n    home_contested_marks = sum(Contested.Marks * home_player),\n    away_contested_marks = sum(Contested.Marks * away_player),\n    home_marks_inside_50 = sum(Marks.Inside.50 * home_player),\n    away_marks_inside_50 = sum(Marks.Inside.50 * away_player),\n    home_one_percenters = sum(One.Percenters * home_player),\n    away_one_percenters = sum(One.Percenters * away_player),\n    home_bounces = sum(Bounces * home_player),\n    away_bounces = sum(Bounces * away_player),\n    home_goal_assists = sum(Goal.Assists * home_player),\n    away_goal_assists = sum(Goal.Assists * away_player),\n    .groups = \"drop\"\n  ) |&gt;\n  arrange(Date, Local.start.time, Home.team) -&gt; \n  match_stats_flat_tb\n\n# verify correct number of games:\nnrow(match_stats_flat_tb) == nrow(results_tb)\n\n[1] TRUE\n\n\n\n\n\nmatch_stats_flat_dt &lt;- copy(player_stats_dt)\n\nmatch_stats_flat_dt[, home_player := Playing.for == Home.team]\nmatch_stats_flat_dt[, away_player := Playing.for == Away.team]\n\nmatch_stats_flat_dt &lt;- match_stats_flat_dt[, .(\n  player_count = .N,\n  home_kicks = sum(Kicks * home_player),\n  away_kicks = sum(Kicks * away_player),\n  home_marks = sum(Marks * home_player),\n  away_marks = sum(Marks * away_player),\n  home_handballs = sum(Handballs * home_player),\n  away_handballs = sum(Handballs * away_player),\n  home_hit_outs = sum(Hit.Outs * home_player),\n  away_hit_outs = sum(Hit.Outs * away_player),\n  home_tackles = sum(Tackles * home_player),\n  away_tackles = sum(Tackles * away_player),\n  home_rebounds = sum(Rebounds * home_player),\n  away_rebounds = sum(Rebounds * away_player),\n  home_inside_50s = sum(Inside.50s * home_player),\n  away_inside_50s = sum(Inside.50s * away_player),\n  home_clearances = sum(Clearances * home_player),\n  away_clearances = sum(Clearances * away_player),\n  home_clangers = sum(Clangers * home_player),\n  away_clangers = sum(Clangers * away_player),\n  home_frees_for = sum(Frees.For * home_player),\n  away_frees_for = sum(Frees.For * away_player),\n  home_frees_against = sum(Frees.Against * home_player),\n  away_frees_against = sum(Frees.Against * away_player),\n  home_contested_possessions = sum(Contested.Possessions * home_player),\n  away_contested_possessions = sum(Contested.Possessions * away_player),\n  home_uncontested_possessions = sum(Uncontested.Possessions * home_player),\n  away_uncontested_possessions = sum(Uncontested.Possessions * away_player),\n  home_contested_marks = sum(Contested.Marks * home_player),\n  away_contested_marks = sum(Contested.Marks * away_player),\n  home_marks_inside_50 = sum(Marks.Inside.50 * home_player),\n  away_marks_inside_50 = sum(Marks.Inside.50 * away_player),\n  home_one_percenters = sum(One.Percenters * home_player),\n  away_one_percenters = sum(One.Percenters * away_player),\n  home_bounces = sum(Bounces * home_player),\n  away_bounces = sum(Bounces * away_player),\n  home_goal_assists = sum(Goal.Assists * home_player),\n  away_goal_assists = sum(Goal.Assists * away_player)\n), by = match_level_fields]\n\nsetorder(match_stats_flat_dt, Date, Local.start.time, Home.team)\n\n# verify outputs match:\nidentical(as.data.frame(match_stats_flat_tb), as.data.frame(match_stats_flat_dt))\n\n[1] TRUE\n\n\n\n\n\nHenceforth, player_stats_* and match_stats_flat_* will be the two datasets we will use predominantly."
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#ids-and-urls",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#ids-and-urls",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "IDs and URLs",
    "text": "IDs and URLs\nOne thing that our match_stats_flat_* dataset is currently lacking is a game ID for use as a primary key. In addition, being able to link directly to AFL tables when talking about particular game or players would be handy.\nGame ID and URL\nLet’s tackle the game ID by writing some functions to an ID which also conveniently lines up with the way AFL Tables game URLs work (two birds with one stone).\n\nteam_code_map &lt;- c(\n  \"Adelaide\" = \"01\",\n  \"Adelaide Crows\" = \"01\",\n  \"Brisbane Bears\" = \"02\",\n  \"Carlton\" = \"03\",\n  \"Collingwood\" = \"04\",\n  \"Essendon\" = \"05\",\n  \"Fitzroy\" = \"06\",\n  \"Western Bulldogs\" = \"07\",\n  \"Fremantle\" = \"08\",\n  \"Geelong\" = \"09\",\n  \"Geelong Cats\" = \"09\",\n  \"Hawthorn\" = \"10\",\n  \"Melbourne\" = \"11\",\n  \"North Melbourne\" = \"12\",\n  \"Port Adelaide\" = \"13\",\n  \"Richmond\" = \"14\",\n  \"St Kilda\" = \"15\",\n  \"Sydney\" = \"16\",\n  \"Sydney Swans\" = \"16\",\n  \"University\" = \"17\",\n  \"West Coast\" = \"18\",\n  \"West Coast Eagles\" = \"18\",\n  \"Brisbane Lions\" = \"19\",\n  \"Gold Coast\" = \"20\",\n  \"Gold Coast Suns\" = \"20\",\n  \"Greater Western Sydney\" = \"21\",\n  \"GWS Giants\" = \"21\"\n)\n\n# The three functions below are all vectorised for efficiency purposes\nget_team_code &lt;- function(team_name) {\n unname(team_code_map[team_name])\n}\n\nget_game_id &lt;- function(home_team_code, away_team_code, game_date) {\n  # example ID: 161820230624\n  game_date_string &lt;- format(game_date, \"%Y%m%d\")\n  \n  ifelse(\n    home_team_code &gt; away_team_code, \n    # the smaller code is always first\n    paste0(away_team_code, home_team_code, game_date_string),\n    paste0(home_team_code, away_team_code, game_date_string)\n    )\n}\n\nget_game_afltables_url &lt;- function(game_id, season) {\n  # example url: https://afltables.com/afl/stats/games/2023/161820230624.html\n  paste0(\"https://afltables.com/afl/stats/games/\", season,\"/\", game_id, \".html\")\n}\n\nNow lets use these functions22 to add a primary key to our match_stats_flat_* datasets.22 Note that as the functions are vectorised, we need not use the slow purrr::map*() or *apply() family of functions to apply them to a column of our tibble and data.table respectively.\n\n\nTidyverse\ndata.table\n\n\n\n\nmatch_stats_flat_tb |&gt; \n  mutate(\n    home_team_code = get_team_code(Home.team),\n    away_team_code = get_team_code(Away.team),\n    game_id = get_game_id(home_team_code, away_team_code, Date),\n    game_afltables_url = get_game_afltables_url(game_id, Season)\n  ) |&gt; \n  relocate(game_id, .before = Season) |&gt; \n  arrange(game_id) -&gt;\n  match_stats_flat_tb\n\n\n\n\nmatch_stats_flat_dt[, home_team_code := get_team_code(Home.team)]\nmatch_stats_flat_dt[, away_team_code := get_team_code(Away.team)]\nmatch_stats_flat_dt[, game_id := get_game_id(home_team_code, away_team_code, Date)]\nmatch_stats_flat_dt[, game_afltables_url := get_game_afltables_url(game_id, Season)]\n\nsetcolorder(match_stats_flat_dt, c(\"game_id\", setdiff(names(match_stats_flat_dt), \"game_id\")))\nsetkey(match_stats_flat_dt, game_id)\n\n# verify outputs match:\nidentical(as.data.frame(match_stats_flat_tb), as.data.frame(match_stats_flat_dt))\n\n[1] TRUE\n\n\n\n\n\nPlayer URLs\nIn a similar way we can add a player URL to our player_stats_* datasets, we start by creating a mapping table.\n\n\nTidyverse\ndata.table\n\n\n\n\n# non-duplicate URL: https://afltables.com/afl/stats/players/E/Errol_Gulden.html\n# duplicate URL: https://afltables.com/afl/stats/players/J/Josh_Kennedy0.html, https://afltables.com/afl/stats/players/J/Josh_Kennedy1.html\n# for dealing with duplicates, for example Peter Brown (6 of the same name!) seems to have a nonsensical order\nplayer_stats_tb |&gt; \n  mutate(full_name = paste(First.name, Surname, sep = \"_\")) |&gt; \n  distinct(ID, full_name) |&gt; \n  group_by(full_name) |&gt; \n  arrange(ID) |&gt;\n  mutate(\n    instance_number = as.character(cumsum(rep(1L, n())) - 1L),\n    dup_count = n()\n  ) |&gt; \n  mutate(\n    number_suffix = if_else(dup_count == 1L, \"\", instance_number),\n    first_letter = str_sub(full_name, 1, 1),\n    player_afltables_url = paste0(\"https://afltables.com/afl/stats/players/\", \n                                  first_letter, \"/\", full_name, number_suffix, \".html\")\n  ) |&gt; \n  ungroup() |&gt; \n  select(ID, player_afltables_url) -&gt;\n  player_url_tb\n\n\n\n\nplayer_url_dt &lt;- copy(player_stats_dt)\n\nplayer_url_dt[, full_name := paste(First.name, Surname, sep = \"_\")]\nplayer_url_dt &lt;- unique(player_url_dt, by = c(\"ID\", \"full_name\"))\nsetorder(player_url_dt, ID)\nplayer_url_dt &lt;- player_url_dt[, `:=`(\n  instance_number = as.character(cumsum(rep(1L, .N)) - 1L),\n  dup_count = .N\n), \"full_name\"]\n\nplayer_url_dt[, number_suffix := fifelse((dup_count == 1L), \"\", instance_number)]\nplayer_url_dt[, first_letter := str_sub(full_name, 1, 1)]\nplayer_url_dt[, player_afltables_url := paste0(\"https://afltables.com/afl/stats/players/\", \n                                     first_letter, \"/\", full_name, number_suffix, \".html\")]\nplayer_url_dt &lt;- player_url_dt[, .(ID, player_afltables_url)]\n\n# verify outputs match:\nidentical(as.data.frame(player_url_tb), as.data.frame(player_url_dt))\n\n[1] TRUE\n\n\n\n\n\nNow we can add add the game ID, game URL and player URL to the player_stats_* dataset.\n\n\nTidyverse\ndata.table\n\n\n\n\nplayer_stats_tb &lt;- as_tibble(player_stats) # copied from above\n\nplayer_stats_tb |&gt; \n  mutate(\n    home_team_code = get_team_code(Home.team),\n    away_team_code = get_team_code(Away.team),\n    game_id = get_game_id(home_team_code, away_team_code, Date),\n    player = paste0(First.name, \" \", Surname, \" (\", Playing.for,\")\")\n  ) |&gt; \n  left_join(match_stats_flat_tb |&gt; select(game_id, game_afltables_url), by = \"game_id\") |&gt; \n  left_join(player_url_tb, by = \"ID\") |&gt; \n  relocate(c(\"game_id\", \"player\", \"ID\"), .before = Season) |&gt;\n  arrange(game_id, Playing.for, ID) -&gt;\n  player_stats_tb\n\n\n\n\nplayer_stats_dt &lt;- as.data.table(player_stats) # copied from above\n\nplayer_stats_dt[, home_team_code := get_team_code(Home.team)]\nplayer_stats_dt[, away_team_code := get_team_code(Away.team)]\nplayer_stats_dt[, game_id := get_game_id(home_team_code, away_team_code, Date)]\nplayer_stats_dt[, player := paste0(First.name, \" \", Surname, \" (\", Playing.for,\")\")]\n\nplayer_stats_dt &lt;- merge(\n  player_stats_dt, match_stats_flat_dt[, c(\"game_id\", \"game_afltables_url\")], \n  by = \"game_id\")\n\nplayer_stats_dt &lt;- merge(player_stats_dt, player_url_dt, by = \"ID\")\n\nsetcolorder(player_stats_dt, c(c(\"game_id\", \"player\"), setdiff(names(player_stats_dt), c(\"game_id\", \"player\"))))\nsetkey(player_stats_dt, game_id, Playing.for, ID)\n# verify outputs match:\nidentical(as.data.frame(player_stats_tb), as.data.frame(player_stats_dt))\n\n[1] TRUE"
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#finding-the-infamous-game",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#finding-the-infamous-game",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Finding the Infamous Game",
    "text": "Finding the Infamous Game\nLet’s use these new datasets to perform the simple exercise of obtaining the game ID for the aforementioned Swans versus Eagles game. We can henceforth use this game ID whenever relevant to rank the swans in the statistical category we investigate.\n\n(\n  infamous_game_id &lt;- get_game_id(\n    home_team_code = get_team_code(\"Sydney\"),\n    away_team_code = get_team_code(\"West Coast\"),\n    game_date = as.Date(\"2023-06-24\")\n  )\n)\n\n[1] \"161820230624\"\n\n\nWe can then filter the data and present it below in a table below23.23 note that the code to format the table is omitted.\n\n\nTidyverse\ndata.table\n\n\n\n\nmatch_stats_flat_tb |&gt; \n  filter(game_id == infamous_game_id) |&gt; \n  reactable(\n    # formatting code omitted\n  ) \n\n\n\n\nreactable(match_stats_flat_dt[game_id == infamous_game_id, ])# reactable formatting code omitted\n\n\n\n\nMatch Stats\n\n\n\n\n\n\n\n\nPlayer Stats\n\n\nTidyverse\ndata.table\n\n\n\n\nplayer_stats_tb |&gt; \n  filter(game_id == infamous_game_id) |&gt; \n  reactable(\n    # formatting code omitted\n  ) \n\n\n\n\nreactable(player_stats_dt[game_id == infamous_game_id, ])# reactable formatting code omitted"
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#highest-scoring-quarter",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#highest-scoring-quarter",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Highest Scoring Quarter",
    "text": "Highest Scoring Quarter\nAs listed above, our first question was:\n\nWhat is the record for the highest scoring quarter?\n\n\nNot that there is already a page on this topic on AFL Tables, but it is a good one to start with regardless.\n\nTo answer this question, we will first we should begin by creating a reshaped version of the match_stats_flat_* dataset that is structured around quarters.\n\n\nTidyverse\ndata.table\n\n\n\n\ngame_level_columns &lt;- c(\"game_id\", \"game_afltables_url\", \"Season\", \"Round\", \"Venue\", \"Home.team\", \"Away.team\", \"Home.score\", \"Away.score\")\n\nmatch_stats_flat_tb |&gt; \n  select(all_of(game_level_columns), starts_with(\"HQ\"), starts_with(\"AQ\")) |&gt; \n  pivot_longer(cols = c(starts_with(\"HQ\"), starts_with(\"AQ\")), names_to = \"quarter_gb\", values_to = \"gb_count\") |&gt;\n  mutate(\n    quarter = str_extract(quarter_gb, \"\\\\d\"),\n    gb_label = if_else(str_detect(quarter_gb, \"G$\"), \"goals\", \"behinds\"),\n    is_home_score = str_detect(quarter_gb, \"^H\")\n    ) |&gt;\n  pivot_wider(id_cols = all_of(c(game_level_columns, \"quarter\", \"is_home_score\")), names_from = gb_label, values_from = gb_count) |&gt;\n  arrange(game_id, is_home_score, quarter) |&gt; \n  group_by(game_id, is_home_score) |&gt; \n  mutate(# make quarters incremental\n    goals = c(head(goals, 1), diff(goals)),\n    behinds = c(head(behinds, 1), diff(behinds))\n  ) |&gt; \n  ungroup() |&gt; \n  mutate(\n    score = goals * 6 + behinds,\n    team = if_else(is_home_score, Home.team, Away.team),\n    opposition = if_else(!is_home_score, Home.team, Away.team)\n    ) |&gt; \n  select(-is_home_score) -&gt; quarter_stats_tb\n\n\n\n\ngame_level_columns &lt;- c(\"game_id\", \"game_afltables_url\", \"Season\", \"Round\", \"Venue\", \"Home.team\", \"Away.team\", \"Home.score\", \"Away.score\")\n\nquarter_stats_dt &lt;- copy(match_stats_flat_dt)\nquarter_stats_dt &lt;- quarter_stats_dt[, .SD, .SDcols = names(quarter_stats_dt) %like% paste(\n  paste(game_level_columns, collapse = \"|\"), \"^HQ\", \"^AQ\", \n  sep = \"|\")]\nquarter_stats_dt &lt;- melt(quarter_stats_dt, id.vars = game_level_columns, variable.name =  \"quarter_gb\", value.name = \"gb_count\")\n\nquarter_stats_dt[, quarter := str_extract(quarter_gb, \"\\\\d\")]\nquarter_stats_dt[, gb_label := fifelse(str_detect(quarter_gb, \"G$\"), \"goals\", \"behinds\")]\nquarter_stats_dt[, is_home_score := str_detect(quarter_gb, \"^H\")]\n\nquarter_stats_dt[, quarter_gb:=NULL]\nquarter_stats_dt &lt;- dcast(quarter_stats_dt, ... ~ gb_label, value.var = \"gb_count\")\n\n# make quarters incremental\nsetorder(quarter_stats_dt, game_id, is_home_score, quarter)\nquarter_stats_dt[, goals := c(head(goals, 1), diff(goals)), c(\"game_id\", \"is_home_score\")]\nquarter_stats_dt[, behinds := c(head(behinds, 1), diff(behinds)), c(\"game_id\", \"is_home_score\")]\n\nquarter_stats_dt[, score := goals * 6 + behinds]\nquarter_stats_dt[, team := fifelse(is_home_score, Home.team, Away.team)]\nquarter_stats_dt[, opposition := fifelse(!is_home_score, Home.team, Away.team)]\n\nquarter_stats_dt &lt;- quarter_stats_dt[, .SD, .SDcols = c(game_level_columns, c(\"quarter\", \"goals\", \"behinds\", \"score\", \"team\", \"opposition\"))]\n\n# verify outputs match:\nidentical(as.data.frame(quarter_stats_tb), as.data.frame(quarter_stats_dt))\n\n[1] TRUE\n\n\n\n\n\nWe will answer this question for each quarter (first, second, third and fourth), as well as overall. This means we we will be repeating the same process five times, so this calls for writing a function. The function will give us the top 5 scoring quarters, as well as ranking for the aforementioned infamous game on the all time list of quarters.\n\n\nTidyverse\ndata.table\n\n\n\n\nget_top_quarter_scores_tb &lt;- function(data, quarter_selection) {\n  data |&gt; \n    filter(quarter %in% quarter_selection) |&gt;\n    arrange(desc(score)) |&gt; \n    mutate(rank = seq_along(team)) |&gt; \n    filter(rank %in% 1:5 | (game_id == infamous_game_id & team == \"Sydney\")) |&gt; \n    select(rank, team, opposition, score, quarter, Season, Round, Venue, game_afltables_url, game_id)\n}\n\n\n\n\nget_top_quarter_scores_dt &lt;- function(data, quarter_selection) {\n  top_quarters_q1_dt &lt;- copy(quarter_stats_dt)\n  top_quarters_q1_dt &lt;- top_quarters_q1_dt[\n    quarter %in% quarter_selection, ]\n  setorder(top_quarters_q1_dt, -score)\n  top_quarters_q1_dt[, rank := seq_along(team)]\n  top_quarters_q1_dt[rank %in% 1:5 | (game_id == infamous_game_id & team == \"Sydney\"), \n                     .(rank, team, opposition, score, quarter, Season, Round, Venue, game_afltables_url, game_id)]\n}\n\n\n\n\n\n\n\nFirst Quarter\n\n\nTidyverse\ndata.table\n\n\n\n\ntop_quarter_scores_q1_tb &lt;- get_top_quarter_scores_tb(quarter_stats_tb, 1L)\n\n\n\n\ntop_quarter_scores_q1_dt &lt;- get_top_quarter_scores_dt(quarter_stats_tb, 1L)\n# verify outputs match:\nidentical(as.data.frame(top_quarter_scores_q1_tb), as.data.frame(top_quarter_scores_q1_dt))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe record for the highest-scoring first quarter occurred during the bloodbath of an encounter that was the game the Bombers first ever clash with the Gary Ablett Jr-led Gold Coast Suns in their inaugural season in the AFL. The Bombers came out of the blocks in a flash and mercilessly obliterated the inexperienced Gold Coast side, notching up a 93 point lead at quarter time. Interestingly, the Sun actually managed to win the second quarter as the bombers appeared to take there foot off the gas a little to only win by 139 points when all was said and done.\n\nPerhaps the Suns’ lethargy in the first quarter against the Dons can be explained as a hangover24 following on from their first ever win the previous week25. It is exciting to me that this is a game that I can remember watching on the television at the time, it may have even been the first Gold Coast game I ever watched26. Footy is full of narratives and it fun to spin one around this particular game (the context and stories make footy stats even more fun).24 As a club with an abundance of 18 or 19 year old blokes living out of home for the first time, the Suns were known to over-indulge in the Gold Coast party culture in those days.25 Courtesy of a (missed) shot at goal after the siren from Justin Westhoff.26 And thank god I didn’t give up on watching them after that (mainly due to Gary Ablett I will admit) because otherwise I would have missed unbelievable goals like this.\nSecond Quarter\n\n\nTidyverse\ndata.table\n\n\n\n\ntop_quarter_scores_q2_tb &lt;- get_top_quarter_scores_tb(quarter_stats_tb, 2L)\n\n\n\n\ntop_quarter_scores_q2_dt &lt;- get_top_quarter_scores_dt(quarter_stats_tb, 2L)\n# verify outputs match:\nidentical(as.data.frame(top_quarter_scores_q2_tb), as.data.frame(top_quarter_scores_q2_dt))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom one teams first season, to another’s last. It is quite fitting (although a little sad) that the highest scoring second quarter was against a floundering (aforementioned) fitzRoy Football Club (to which we owe the ease with which we obtained this data) en-route to a wooden spoon in their final season prior to merging with Brisbane Bears to form the Brisbane Lions.\nAs I was not yet born, I do not remember the game, but on the video below, the commentator shrewdly points to a strong wind prevailing towards the Crows’ goal at the beginning of the second quarter which certainly didn’t bode well for the Lions.\n\nThird Quarter\n\n\nTidyverse\ndata.table\n\n\n\n\ntop_quarter_scores_q3_tb &lt;- get_top_quarter_scores_tb(quarter_stats_tb, 3L)\n\n\n\n\ntop_quarter_scores_q3_dt &lt;- get_top_quarter_scores_dt(quarter_stats_tb, 3L)\n# verify outputs match:\nidentical(as.data.frame(top_quarter_scores_q3_tb), as.data.frame(top_quarter_scores_q3_dt))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Swans’s third quarter appears in 28th position here, which is the best position it gets. The game on top, the Bombers had a very even distribution of goal-kickers and kicked 32 goals so they may appear later in our list of multiple goal kickers question.\nFourth Quarter\n\n\nTidyverse\ndata.table\n\n\n\n\ntop_quarter_scores_q4_tb &lt;- get_top_quarter_scores_tb(quarter_stats_tb, 4L)\n\n\n\n\ntop_quarter_scores_q4_dt &lt;- get_top_quarter_scores_dt(quarter_stats_tb, 4L)\n# verify outputs match:\nidentical(as.data.frame(top_quarter_scores_q4_tb), as.data.frame(top_quarter_scores_q4_dt))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\nWell this was slightly unexpected, the Bloods27 came home like a freight train against the woeful Saints in a game that took place over 100 years ago. It is also the only quarter in AFL history that has notched up a ton. Upon seeing this, given it’s vintage, I though that perhaps the story of this game might have been lost to time but the Swans to have a most insightful article up on their website about it. The explanation it provides is that St Kilda were undermanned through a combination of injury and player protest on account of off-field disputes. It is safe to say that the “Bloods” showed them no mercy.27 Incorrectly labelled here as “Sydney” in the table above because at the time they resided in South Melbourne (they relocated to Sydney in 1982), they were also known as the “Bloods” prior to adopting their current Swans mascot in 1933 due to the number of Western Australians in the side (as a WA boy I couldn’t help mentioning this)\nAll Quarters\n\n\nTidyverse\ndata.table\n\n\n\n\ntop_quarter_scores_tb &lt;- get_top_quarter_scores_tb(quarter_stats_tb, 1L:4L)\n\n\n\n\ntop_quarter_scores_dt &lt;- get_top_quarter_scores_dt(quarter_stats_tb, 1L:4L)\n# verify outputs match:\nidentical(as.data.frame(top_quarter_scores_tb), as.data.frame(top_quarter_scores_dt))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the infamous game, the Swan’s third (premiership) quarter was the only one that reached the top 100 quarters of all time. The fact that no quarter was even close to the the top indicates that the swans were very consistent through-out the game. To use a cliche, they put in a consistent four-quarter effort and I support the Eagles were consistent too (consistently dismal)."
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#most-goal-kickers",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#most-goal-kickers",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Most Goal-kickers",
    "text": "Most Goal-kickers\nThree of the aforementioned questions concern goal kickers. We can therefore write a function that can generalise our approach like we did for the previous question.\nThese questions were:\n\nWhat is the record for the most individual goal kickers in a single game?\n\n\nWhat is the record for the most multiple goal kickers in a single game?\n\n\nWhat is the record for the most players kicking five or more goals in a single game (i.e. the most “bags”)?\n\nThe Swans game appeared to have a rather even distribution of goal kickers in the infamous, so it will be interesting to see where it places on the all time list in this category.\n\n\nTidyverse\ndata.table\n\n\n\n\nget_top_goal_scorers_tb &lt;- function(data, min_goals) {\ndata |&gt; \n  mutate(\n    team = Playing.for,\n    opposition = if_else(team == Home.team, Away.team, Home.team)\n  ) |&gt; \n  group_by(team, opposition, Season, Round, Venue, game_afltables_url, game_id, Date) |&gt; \n  summarise(\n    goal_kickers = sum(Goals &gt; min_goals),\n    .groups = \"drop\"\n  ) |&gt; \n  arrange(desc(goal_kickers), desc(Date)) |&gt; \n  mutate(rank = seq_along(game_id)) |&gt; \n  relocate(rank, .before = \"team\") |&gt; \n  relocate(goal_kickers, .before = \"Season\") |&gt; \n  filter(rank %in% 1:5|(game_id == infamous_game_id & team == \"Sydney\")) |&gt;\n  select(-Date)\n}\n\n\n\n\nget_top_goal_scorers_dt &lt;- function(data, min_goals) {\n  top_goal_scorers_dt &lt;- copy(data)\n  top_goal_scorers_dt[, team := Playing.for]\n  top_goal_scorers_dt[, opposition := fifelse(team == Home.team, Away.team, Home.team)]\n  \n  top_goal_scorers_dt &lt;- top_goal_scorers_dt[,.(goal_kickers = sum(Goals &gt; min_goals)),\n                                             c(\"team\", \"opposition\", \"Season\", \"Round\", \"Venue\", \n                                               \"game_afltables_url\", \"game_id\", \"Date\")]\n  setorder(top_goal_scorers_dt, -goal_kickers, -Date)\n  top_goal_scorers_dt[, rank := seq_along(game_id)]\n  \n  \n  top_goal_scorers_dt[rank %in% 1:5|(game_id == infamous_game_id & team == \"Sydney\"),\n                      .(rank, team, opposition, goal_kickers, Season, Round, Venue, \n                        game_afltables_url, game_id)]\n}\n\n\n\n\n\n\n\nIndividual\n\n\nTidyverse\ndata.table\n\n\n\n\ntop_goal_scorers_single_tb &lt;- get_top_goal_scorers_tb(player_stats_tb, 0L)\n\n\n\n\ntop_goal_scorers_single_dt &lt;- get_top_goal_scorers_dt(player_stats_dt, 0L)\n# verify outputs match:\nidentical(as.data.frame(top_goal_scorers_single_tb), as.data.frame(top_goal_scorers_single_dt))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe record for most goal kickers is actually tied by multiple teams. The most recent time this happened was in the Bulldogs’ 101 point drubbing of the Eagles last year28. The infamous game is a bit off the pace in 238th but 12 goal-kickers is still double a starting forward line.28 Yet another example of how poorly the eagles have been done in 2022 and 2023\nMultiple\n\n\nTidyverse\ndata.table\n\n\n\n\ntop_goal_scorers_multiple_tb &lt;- get_top_goal_scorers_tb(player_stats_tb, 1L)\n\n\n\n\ntop_goal_scorers_multiple_dt &lt;- get_top_goal_scorers_dt(player_stats_dt, 1L)\n# verify outputs match:\nidentical(as.data.frame(top_goal_scorers_multiple_tb), as.data.frame(top_goal_scorers_multiple_dt))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Swans game actually places equal 7th on the list of all time which is quite a notable result. It is also interesting that it was another one-sided Swans game29 at the SCG that takes outright top spot. In that game (circa 1987) the human highlight reel Warwick Capper led all comers for the Swans with a bag of 6 snags.29 Full game, article\nFive or More (Bags)\n\n\nTidyverse\ndata.table\n\n\n\n\ntop_goal_scorers_bags_tb &lt;- get_top_goal_scorers_tb(player_stats_tb, 4L)\n\n\n\n\ntop_goal_scorers_bags_dt &lt;- get_top_goal_scorers_dt(player_stats_dt, 4L)\n# verify outputs match:\nidentical(as.data.frame(top_goal_scorers_bags_tb), as.data.frame(top_goal_scorers_bags_dt))\n\n[1] TRUE\n\n\n\n\n\n\n\n\n\n\n\n\n\nFour bags in one game has happened on two occasions, the most recent of which (in 1991) yet again featured the Fitzroy lions, who were trounced by 157 points by the Hawks in North Hobart.\nThe list of bag-getters in this game makes for interesting reading, all were recognisable names (although one more for his family connections that his own merit). As one might expect, one of the bags was courtesy of Hawthorn spearhead Jason Duntall (6 snags), along with 7 a piece from WA boy Ben Allan30 and the three-time premiership player Darren Jarmon. Rounding out the 4 was a contribution of 5 snags from Paul Hudson, who is the son of Tasmanian footy legend Peter Hudson (how fitting that this game was played in Tassie) who average more than 5 goals a game himself (an incredible feat).30 Sorry I couldn’t help myself, he was also a Claremont Tiger (up the mighty Tiges)"
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#questions-about-questionable-disposal",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#questions-about-questionable-disposal",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Questions About Questionable Disposal",
    "text": "Questions About Questionable Disposal\nTwo of the questions concerned clangers and disposal efficiency:\n\nWhat is the record for the most clangers in a game?\n\n\nWhat is the record for the worst disposal efficiency in a game?\n\nThese statistics (which we will define below) are more advanced and have only been recorded more recently, so we will therefore have to check which\nMost Clangers\nA clanger is defined as\n\nan absurd or embarrassing blunder.\n\nOr in more precise football statistics terms\n\nAn error made by a player resulting in a negative result for his side. Disposal clangers are any kick or handball that directly turns the ball over to the opposition. Frees and 50-metre penalties against, No Pressure Errors, Dropped Marks and Debits are all included in clangers.3131 Source (Champion Data){target-blank}\n\n\n\nTidyverse\ndata.table\n\n\n\n\nc(\"team\", \"opposition\", \"Season\", \"Round\", \"Venue\", \"game_afltables_url\", \"game_id\", \"Date\")\n\n[1] \"team\"               \"opposition\"         \"Season\"            \n[4] \"Round\"              \"Venue\"              \"game_afltables_url\"\n[7] \"game_id\"            \"Date\"              \n\nplayer_stats_tb |&gt; \n  group_by(Home.team, Away.team, Season, Round, Venue, game_afltables_url, game_id, Date) |&gt; \n  summarise(\n    clangers_per_possession = sum(Clangers) / sum(Kicks + Handballs),\n    clangers = sum(Clangers)\n  ) |&gt; \n  arrange(desc(clangers_per_possession))\n\n`summarise()` has grouped output by 'Home.team', 'Away.team', 'Season',\n'Round', 'Venue', 'game_afltables_url', 'game_id'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 16,352 × 10\n# Groups:   Home.team, Away.team, Season, Round, Venue, game_afltables_url,\n#   game_id [16,352]\n   Home.team  Away.team Season Round Venue game_afltables_url game_id Date      \n   &lt;chr&gt;      &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;              &lt;chr&gt;   &lt;date&gt;    \n 1 Gold Coast Port Ade…   2018 9     Jian… https://afltables… 132020… 2018-05-19\n 2 Richmond   St Kilda    2023 14    M.C.… https://afltables… 141520… 2023-06-17\n 3 Port Adel… Richmond    2020 PF    Adel… https://afltables… 131420… 2020-10-16\n 4 Adelaide   Collingw…   2023 7     Adel… https://afltables… 010420… 2023-04-30\n 5 Gold Coast North Me…   2018 1     Caza… https://afltables… 122020… 2018-03-24\n 6 Gold Coast Fremantle   2022 9     Carr… https://afltables… 082020… 2022-05-15\n 7 Melbourne  Carlton     2021 9     M.C.… https://afltables… 031120… 2021-05-16\n 8 Greater W… Hawthorn    2022 16    Sydn… https://afltables… 102120… 2022-07-03\n 9 Sydney     Richmond    2022 11    S.C.… https://afltables… 141620… 2022-05-27\n10 Gold Coast North Me…   2022 12    Marr… https://afltables… 122020… 2022-06-04\n# ℹ 16,342 more rows\n# ℹ 2 more variables: clangers_per_possession &lt;dbl&gt;, clangers &lt;dbl&gt;\n\n\nThe fixture between the sun\n\n\n\n\n\n\n\n\nWorst Disposal Efficiency\nDisposal efficiency is\n\nthe percentage of disposals that are effective.3232 Source (Champion Data){target-blank}\n\nWhere effective disposal is any of\n\n\nEffective handball: a handball to a teammate that hits the intended target.\nEffective Short Kick: A kick of less than 40 metres that results in the intended target retaining possession. Does not include kicks that are spoiled by the opposition.\nEffective Long Kick: A kick of more than 40 metres to a 50/50 contest or better for the team.33\n\n\n33 Source (Champion Data){target-blank}\nNote that the distance of the disposal is an element of how lenient the definition of “effective” is.\nThis statistic requires our first (and only) use of the official AFL website as it is not present on the AFL Tables data. Thus we only have data for it from 2014 onwards.\nWe shall measure this by checking the most disposal with none effective being effective.\n\n\nTidyverse\ndata.table\n\n\n\n\nplayer_stats_fryzigg &lt;- fitzRoy::fetch_player_stats_fryzigg(season = 2010:2023)\n\nℹ Returning cached AFLM data from 2010, 2011, 2012, 2013, 2014, 2015, 2016, 201…\n\n\n✔ Returning cached AFLM data from 2010, 2011, 2012, 2013, 2014, 2015, 2016, 201…\n\n\n\n\nplayer_stats_fryzigg_all &lt;- fitzRoy::fetch_player_stats_fryzigg(season = 1897:2023)\n\nℹ Returning cached AFLM data from 1897, 1898, 1899, 1900, 1901, 1902, 1903, 190…\n\n\n✔ Returning cached AFLM data from 1897, 1898, 1899, 1900, 1901, 1902, 1903, 190…\n\n\n\n\nplayer_stats_fryzigg_all |&gt; filter(!is.na(disposal_efficiency_percentage)) |&gt; dim()\n\n[1] 106444     81\n\nplayer_stats_fryzigg_all |&gt; filter(!is.na(match_weather_type)) |&gt; dim()\n\n[1] 123208     81\n\nplayer_stats_fryzigg |&gt; \n  mutate(\n    home_team_code = get_team_code(match_home_team),\n    away_team_code = get_team_code(match_away_team),\n    season = str_sub(match_date, 1, 4),\n    afl_tables_game_id = get_game_id(home_team_code, away_team_code, as.Date(match_date)),\n    afl_tables_url = get_game_afltables_url(afl_tables_game_id, season)\n  ) |&gt; \n  select(afl_tables_game_id, match_weather_type) |&gt; \n  distinct() -&gt; match_stats_fryzigg_id\n\n\n\nplayer_stats_afl_official_tb |&gt; \n  filter(!is.na(player.player.player.playerId)) |&gt; \n  mutate(\n    home_team_code = get_team_code(home.team.name),\n    away_team_code = get_team_code(away.team.name),\n    season = str_sub(format(utcStartTime, format =\"%y\"), 1, 4),\n    afl_tables_game_id = get_game_id(home_team_code, away_team_code, as.Date(utcStartTime)),\n    afl_tables_url = get_game_afltables_url(afl_tables_game_id, season)\n  ) -&gt; player_stats_afl_official_id_tb\n\nplayer_stats_afl_official_id_tb |&gt; \n  group_by(season, afl_tables_url, afl_tables_game_id) |&gt; \n  summarise(\n    disposalEfficiency_game = sum(disposalEfficiency * disposals) / sum(disposals),\n    .groups = \"drop\"\n    ) |&gt; \n  arrange(disposalEfficiency_game) |&gt; \n  left_join(match_stats_fryzigg_id, by = \"afl_tables_game_id\")\n\n# A tibble: 1,988 × 5\n   season afl_tables_url               afl_tables_game_id disposalEfficiency_g…¹\n   &lt;chr&gt;  &lt;chr&gt;                        &lt;chr&gt;                               &lt;dbl&gt;\n 1 2018   https://afltables.com/afl/s… 122020180324                         49.8\n 2 2018   https://afltables.com/afl/s… 010720180518                         54.2\n 3 2014   https://afltables.com/afl/s… 132020140816                         57.4\n 4 2019   https://afltables.com/afl/s… 071320190629                         58.0\n 5 2014   https://afltables.com/afl/s… 141820140725                         58.0\n 6 2022   https://afltables.com/afl/s… 102120220703                         58.2\n 7 2020   https://afltables.com/afl/s… 030820200815                         58.3\n 8 2020   https://afltables.com/afl/s… 080920200727                         58.6\n 9 2018   https://afltables.com/afl/s… 132020180519                         58.9\n10 2014   https://afltables.com/afl/s… 082020140329                         59.1\n# ℹ 1,978 more rows\n# ℹ abbreviated name: ¹​disposalEfficiency_game\n# ℹ 1 more variable: match_weather_type &lt;chr&gt;\n\n\nThe only game with less than 50% disposal efficiency was played in torrid conditions up in Cairns. Looking at the video highlights{target=“_blank}, the players were running through puddles the whole game. I have however seen equal or worse conditions in the past so it is somewhat curious that this was the worst by such a margin (for reference Gold Coast we very poor that year, coming second last but the Roos came in a respectible ninth position only one game outside the top 8, this also points to them probably winning this game if has been played in more favourable conditions but they still would have missed out on finals due to the mammoth percentage of the Cats that year). The “cleanest” player on the day was Jesse Joyce, who’s 8 touches came at 75% efficiency (however it was a rather low sample size).\nSeeing a game in 2018 is also a nice reminder of the last time the Eagles won a premiership which feels a long way off given the current predicament the club is in (in spit of their recent win against the also languishing Roos last Sunday).\nIn the 20th century, the use of suburban grounds where the quality of the surface was subpar I am sure lead to far more games with lower disposal efficiency than this (muddy fields were far more common in those days).\nBut we can’t entirely blame the players, given the conditions the conditions. Anyone who has kick a footy around in the wet will know how much heavier and slipperier it can get, it is often described as being like a bar of soap. By looking through old highlights packages of the top two games,"
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#youngest-norm-smith-medalist",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#youngest-norm-smith-medalist",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Youngest Norm Smith Medalist",
    "text": "Youngest Norm Smith Medalist\nMake the below a collapsible callout (some of it doesn’t need to be)\nThis illustrates the fact that sometimes you need to stray outside of fitzRoy but it give most of the data you could ever want.\nBackground\nThe norm smith medal is award to the player adjudged best a field (best on ground) in the Grand Final.\nThe Norm Smith was first instituted in 1979 and prior to this, there was no official award given. However there is a source someone has provided of who they (and the media of the day) adjudged as being.\nWhile as a Western Australian, I would have no qualms with discarding the older, exclusively Victorian seasons, if not for the fact more data available is always nice (even if it is of more dubious quality).\nUnofficial source of older data https://themongrelpunt.com/footy-history/2020/04/30/before-the-norm-smith-best-on-ground-prior-to-1979/#:~:text=Robert%20Dipierdomenico%20was%20arguably%20best,the%2077%20Grand%20Final%20Replay.\nFor official norm smith which ever of the following are easier:\n\nhttps://www.afl.com.au/stats/leaders-awards/norm-smith-medal\nhttps://en.wikipedia.org/wiki/Norm_Smith_Medal#Recipients\n\nMake sure it lines up with the AFL data.\nFind the youngest player, player with least games"
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#summary-of-answers",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#summary-of-answers",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Summary of Answers",
    "text": "Summary of Answers\nSummarise by player, team player and season where relevant (grouped columns or potentially a tabbed layout if needed)\nInterestingly, the aforementioned infamous game isn’t the record-holder (or even in the top 5) for any of our questions but it was remarkable enough as only one of 31 games where a team has scored 200 points or more which is notable enough I think, particularly given I had the (mis-)fortune of witnessing it in the flesh. Perhaps we could dig deeper to find a record it holds but I somehow find more satisfaction in it being a thought-provoking enough game to coax these questions out of us without it ever being the answer."
  },
  {
    "objectID": "blog/2023/July/over-analysing-idle-footy-chat/index.html#notable-afl-stats-figures",
    "href": "blog/2023/July/over-analysing-idle-footy-chat/index.html#notable-afl-stats-figures",
    "title": "(Over-)Analysing Idle Footy Chat",
    "section": "Notable AFL Stats Figures",
    "text": "Notable AFL Stats Figures\nI will concluse by listing some people whoare doing interesting work with AFL stats (often with heavy use of R and the fitzRoy package) to provide further motivation:\n\nfitzRoy: as outlined in this article, this R package is the de facto way of sourcing AFL data.\nUseless AFL Stats: a Facebook page which shares always interesting, sometimes abstract and often amusing AFL stats content. Liam Crow is their data scientist and posts some interesting content of his own on his website: https://www.crowdatascience.com.\nsquiggle.com.au: displays a bunch of people’s data-driven tipping models, many of which have websites and social media accounts where they do AFL stats.\nJaiden Popowski: is prominent in the AFL Fantasy community for the interesting data-driven analysis he produces.\nDFS Australia: has some great data-driven tools that provide insight on advanced stats commonly used in AFL Fantasy."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Sport\n\n\nAFL\n\n\nR\n\n\nData\n\n\n\n\nThis blog post discusses the types of questions one often posits while watching the footy (or indeed any sport). I will use this article as a medium through which I can introduce analysis of AFL data in R.\n\n\n\n\n\n\n30 July 2023\n\n\nTim Gummer\n\n\n48 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/index.html#section",
    "href": "blog/index.html#section",
    "title": "Blog",
    "section": "",
    "text": "Sport\n\n\nAFL\n\n\nR\n\n\nData\n\n\n\n\nThis blog post discusses the types of questions one often posits while watching the footy (or indeed any sport). I will use this article as a medium through which I can introduce analysis of AFL data in R.\n\n\n\n\n\n\n30 July 2023\n\n\nTim Gummer\n\n\n48 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv/index.html#download",
    "href": "cv/index.html#download",
    "title": "Curriculum Vitae",
    "section": "Download",
    "text": "Download\n\n\n\n\n  \n     Download current CV"
  },
  {
    "objectID": "cv/index.html#colophon",
    "href": "cv/index.html#colophon",
    "title": "Curriculum Vitae",
    "section": "Colophon",
    "text": "Colophon\n\nHow the CV(ausage) is made.\n\nMy resume was built in a “data-driven” fashion using the vitae R package and Excel1. It uses the beautiful Awesome CV template which I previously used in pure \\(\\LaTeX\\).1 Note that the linked YouTube video does not use Excel but I do.\nSharing\nIt is currently in a private repository on GitHub as it has some private information in it. There is also a visually consistent template for writing (cover) letters as well. I am happy to share the code with anyone who is interested. It probably is best suited to those familiar with \\(\\LaTeX\\), R and Excel2.2 I am not sure how large the intersection between these skill sets is but I personally find the workflow and resulting look very satisfying.\nIn the future I may make a clean template in a public repository to share with an accompanying blog post on how to use the template."
  },
  {
    "objectID": "cv/index.html#bit-of-fun",
    "href": "cv/index.html#bit-of-fun",
    "title": "Curriculum Vitae",
    "section": "Bit of Fun",
    "text": "Bit of Fun\nUnfortunately I do not have a video CV."
  },
  {
    "objectID": "goals/index.html#table-legend",
    "href": "goals/index.html#table-legend",
    "title": "Goals",
    "section": "Table Legend",
    "text": "Table Legend\nBelow is a legend for the Status and Completion fields."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tim Gummer",
    "section": "",
    "text": "Github\n  \n  \n    \n     LinkedIn\n  \n  \n    \n     Email\n  \n\n  \n  \n\nYou have reached the personal website of Tim Gummer. I am an Associate of Institute of Actuaries of Australia (AIAA). I am currently taking an 18 month leave of absence from my job as an Actuarial Analyst at Finity Consulting in order to spend more time on my actuarial studies (to become a fellow), with my family and on personal projects.\nI have built this website as a fun project. I would like to use it to chronicle some of my side projects. I enjoy these projects for their own sake and the main benefit I get out of them is learning and the satisfaction of building something cool. I hope that this website will provide me with further motivation to work on these projects (as well as being an enjoyable project in and of itself).\n\nThe content of this site will mix and match combinations of some of my particular interests/skills listed below:\n\nTools/Languages: R, VBA, Excel, \\(\\LaTeX\\), Python\nMethods: Statistics, Data Science (Collection, Visualisation, Modelling), Mathematics\nApplications: Sport (Australian Rules Football, Cricket)"
  },
  {
    "objectID": "index.html#welcome-to-my-website",
    "href": "index.html#welcome-to-my-website",
    "title": "Tim Gummer",
    "section": "",
    "text": "You have reached the personal website of Tim Gummer. I am an Associate of Institute of Actuaries of Australia (AIAA). I am currently taking an 18 month leave of absence from my job as an Actuarial Analyst at Finity Consulting in order to spend more time on my actuarial studies (to become a fellow), with my family and on personal projects.\nI have built this website as a fun project. I would like to use it to chronicle some of my side projects. I enjoy these projects for their own sake and the main benefit I get out of them is learning and the satisfaction of building something cool. I hope that this website will provide me with further motivation to work on these projects (as well as being an enjoyable project in and of itself).\n\nThe content of this site will mix and match combinations of some of my particular interests/skills listed below:\n\nTools/Languages: R, VBA, Excel, \\(\\LaTeX\\), Python\nMethods: Statistics, Data Science (Collection, Visualisation, Modelling), Mathematics\nApplications: Sport (Australian Rules Football, Cricket)"
  },
  {
    "objectID": "index.html#session-info",
    "href": "index.html#session-info",
    "title": "Tim Gummer",
    "section": "Session info",
    "text": "Session info\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 11 x64 (build 22621)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_Australia.utf8  LC_CTYPE=English_Australia.utf8   \n[3] LC_MONETARY=English_Australia.utf8 LC_NUMERIC=C                      \n[5] LC_TIME=English_Australia.utf8    \n\ntime zone: Australia/Sydney\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1        \n [5] tools_4.3.1       htmltools_0.5.5   rstudioapi_0.14   yaml_2.3.7       \n [9] rmarkdown_2.22    knitr_1.43        jsonlite_1.8.5    xfun_0.39        \n[13] digest_0.6.31     rlang_1.1.1       evaluate_0.21    \n\nSys.time()\n\n[1] \"2023-07-25 15:41:36 AEST\""
  }
]