---
title: "(Over-)Analysing Idle Footy Chat"
description: |
  This blog post discusses the types of questions one often posits while watching the footy (or indeed any sport). I will use this article as a medium through which I can introduce analysis of AFL data in R.
date: 2023-07-29
categories: 
  - Sport
  - AFL
  - R
  - Data
image: fitzroy-lions-logo.png
reference-location: margin
draft: false
reading-time: true
# format:
#   html:
#     include-before-body: ../../html/margin_image.html
#     include-after-body: ../../html/blog_footer.html
---


<!-- TODO: if need to change this in any way add a collapseable ammendments section in the form of a collapsable caution callout block with a bullet list with the date, a colon then a description of the change (e.g. fixed typos) -->

```{r hidden setup}
#| echo: false
#| message: false

library(reactable)
source("../../../../scripts/reactable-theming.R")


```




# Prelude

Since antiquity (or at the very least living memory), sporting data have been recorded, published and analysed for almost every professional sport known to man. In the modern day of analytics and social media it has reached a point where sports statistics are constantly being recorded and opined on by teams, the press and your average punter alike. 

My beloved sport of *Australian Rules Football* (which I will henceforth refer to as "footy"[^footy]) is no different. Indeed some have even described the AFL (Australia's nation competition) as "the most data rich sport on Earth"[^data-rich-sport-source], although I would suggest that certain American sports such as baseball (i.e. [Moneyball](https://www.youtube.com/watch?v=PlKDQqKh03Y){target="_blank"}) have made far better use of their data.

[^footy]: As a Western Australian this is how I define it (along with the majority of Australia) but I am aware that this term is reserved for rugby league in New South Wales and Queensland
[^data-rich-sport-source]: [Source](https://www.youtube.com/watch?v=i_mePwh_02M){target="_blank"}


It is my observation that it is common for those watching or attending live footy to ask questions such as:

> What is the record for the most *[statistical category]*?

or 

> When was the last time *[obscure event]* happened?

I believe a contributor to this is that we are emulating what we hear on the broadcast commentary. The difference is that they often have a team of  [computer-type boffins](https://www.youtube.com/clip/UgkxvNk03iqKigc9NKMjWOs2NvuRFRY8xRHn){target="_blank"}[^video-link-disclaimer] behind the scenes feeding them the answer. 

[^video-link-disclaimer]: The video linked here is unfortunately clipped from an American guy who kind of missed the point a bit, but it is also the highest quality clip I could find of this brilliant piece of commentary from BT ([Brian Taylor](https://www.youtube.com/watch?v=E_JCdK4ah78){target="_blank"} for the uninitiated).

> But what are us plebeians meant to do, bereft of such luxuries you might ask?

Well, a quick Google search will make short work of questions of a more trivial nature such as "which player has kicked the most career goals"[^tony-lockett] or "which team has won the most premierships"[^most-premierships]. The more savvy among us may find answers to slightly more edifying questions by performing pro gamer moves such as

* Trawling through more obscure websites such as [AFL Tables](https://afltables.com/afl/afl_index.html){target="_blank"} to answer things like "what is the most disposal Zac Dawson had in a game"[^zac-dawson]; or

* Digging into the deep recesses of the AFL Live App to answer questions like "what is the record for the longest distance run in a game"[^telstra-tracker]

but some questions will still go unanswered.

```{r}
#| echo: false
tippy::tippy_this(elementId = "distance-image", tooltip = 'Also called <img src="longest-distance.jpg" title="Scully dominates!" class="img-fluid"> distribution.')

```


[^zac-dawson]: [19](https://afltables.com/afl/stats/players/Z/Zac_Dawson.html#sortableTable2){target="_blank"}, [versus Melbourne in round 10 2009](https://afltables.com/afl/stats/games/2009/111520090530.html){target="_blank"}

[^telstra-tracker]: [Tom Scully, 18.9 KM]{id='distance-image'}

[^tony-lockett]: [Tony Lockett on 1360](https://en.wikipedia.org/wiki/List_of_VFL/AFL_records#Goalkicking){target="_blank"}

[^most-premierships]: [Carlton and Essendon tied on 16](https://en.wikipedia.org/wiki/List_of_VFL/AFL_records#Premierships){target="_blank"}

However if you are a [gadget-type operator](https://www.youtube.com/clip/UgkxtEJxG9BEEvFMmGfpjSBWc4MtWPKwNTLW){target="_blank"}[^tipping-name] like myself, you will expand the number of footy stats questions you can answer immensely by accessing and manipulating the raw data yourself. There are of course a multitude of tools and approaches to this but in this post, I will be using R (my preferred programming language).

[^tipping-name]: My footy tipping username is *Gadget-type Operator* and I often use other [BT quotes](https://www.youtube.com/watch?v=E_JCdK4ah78){target="_blank"} for my username on other (even non-footy-related) accounts

::: {.callout-caution collapse="true"}


## Apologies for the delay

I have been promising some people that this (my first) post will be "coming soon" for quite some time now. It has finally arrived and the main reasons for slowness are:

* Am a slow writer. I often have all the ideas in my head but when it comes to putting them into nice publishable words, it become a bit of a slog.

* The scope of this project expanded as I kept on branching off from the main mission in order provide additional background.


The R code and analysis itself did not take long at all, so the main areas I am looking to improve in the future are my writing efficiency and keeping the scope of my blog posts under control. However, it would feel like going against my style to avoid going down rabbit holes and off on tangents entirely, so there is still a balance to be struck there.

:::

## Target Audience Unclear

> If you are a footy fan this article will likely present as some mildy interesting footy facts, combined with incomprehensible techno-babble. For R users this will likely appear to be a fairly elementary data wrangling exercise, combined with a bunch of references you don't understand. But if you are both a footy fan and an R user, it will hopefully prove to be a quite interesting read. 

# A concrete example

I recently had the misfortune (as a West Coast fan) of attending a game live between the Sydney Swans and (not so) mighty West Coast Eagles with the following scoreline:

![](swans-vs-eagles-score.png "How embarrassing!")

In one-sided games like this, it seems to me that footy stats questions become more common than usual for two key reasons:

1. It adds something interesting to a game that otherwise lacks excitement

2. These games are often filled with large statistical anomalies that might set new records

If we also consider that it was two actuaries talking, it is safe to say that footy stats questions were flying left, right and centre on that gloomy (but not because of the weather) Saturday night at the SCG. The questions we posed did not just vanish into the aether either, I (with the idea of writing this article in mind) decided to record the more interesting (and doable) questions listed below:

```{=html}
<div id = "question-list"> </div>
```

> 
- [What is the record for the highest scoring quarter?](#highest-scoring-quarter)
- [What is the record for the most individual goal kickers in a single game?](#individual)
- [What is the record for the most multiple goal kickers in a single game?](#multiple)
- [What is the record for the most players kicking five or more goals in a single game (i.e. the most "bags")?](#five-or-more-bags)
- [Where does the aforementioned game rank among the most one-sided games?](#most-one-sided-games)
- [What is the record for the most clangers in a game?](#most-clangers)
- [What is the record for the worst disposal efficiency in a game by a player?](#worst-disposal-efficiency)
- [Has anyone won a Norm Smith Medal in their first season in the AFL?](#youngest-norm-smith-medalist)
- What is the record for the most unanswered goals in a game?*
- What is the school with the most AFL players on their list?*
- What city/town has the most AFL players relative to population?*
- Which player has the best goals to behinds ratio?*
- Have there ever been any undefeated seasons?*
- What is the worst win-loss record to make finals?*


::: {.callout-note}

## Disclaimer on the asterisk

I have put an asterisk next to questions that either: 

* cannot easily be answered by the methods I discuss below; or
* are too lengthy for this blog post (these may get their own blog post in the future). 

The remaining questions will be tackled using R below.

:::


If you are only really interested in the answers (and not the R coding), you can jump ahead by [clicking here](#summary-of-answers).




# Technical Background

## The `fitzRoy` Package

The first step in analysing AFL data is obtaining the data ("collection"). Our first thought might be to search the web for publicly available AFL datasets and APIs or even scrape the data from websites such as the [official AFL website](https://www.afl.com.au/){target="_blank"}, [Footywire](https://www.footywire.com/){target="_blank"} or [AFL Tables](https://afltables.com/afl/afl_index.html){target="_blank"}. But there is a more straight-forward way.


While most people now know Fitzroy as a trendy inner city suburb of Melbourne, filled with terraces and [over-priced croissants](https://www.lunecroissanterie.com/){target="_blank"}, it was once home[^bith-place] to the mighty  ([and now merged out of existence](https://en.wikipedia.org/wiki/Brisbane_Lions#Brisbane_Bears_absorb_Fitzroy_Football_Club's_AFL_operations,_become_Brisbane_Lions){target="_blank"}) Fitzroy Lions Football Club.
  
[![](fitzroy-lions-logo.png "La Marseillaise!")](https://www.youtube.com/watch?v=olKa-0H26k4){target="_blank"}

[^bith-place]: It is also (regrettably) the place of my birth but as a WA boy I don't like to talk about the fact that my parents happened to be in Melbourne when I was born.



We can obtain the data we need very simply using its name-sake, the `fitzRoy` R package. It abstracts away all the web scraping and API calls for us into a very helpful family of `fetch_*` functions.

So let's begin by loading the `fitzRoy` package and while we're at it, I will also load all the other packages I will be using.

```{r load packages}
#| message: FALSE
library(fitzRoy)

# Note that I generally avoid mixing dplyr and data.table at the same time
#   but the reason I have done with will become apparent later
library(dplyr)
library(data.table)

library(rvest)
library(stringr)

```




### `fitzRoy` Data Sources

`fitzRoy` provides access to a number of footy data sources[^FitzRoy] including [AFL Tables](https://afltables.com/){target="_blank"} and the [official AFL website](https://www.afl.com.au/fixture){target="_blank"}. Each data source has its own advantages and disadvantages, for example:

* [AFL Tables](https://afltables.com/){target="_blank"} has the entirety of AFL/VFL history (1897 to present) but lacks some of the more advanced stats.

* The [official AFL website](https://www.afl.com.au/fixture){target="_blank"} only has data from 2014 onwards but it also probably the most complete in terms of the advanced statistics it contains (e.g. centre bounce attendances[^CBAs]).

[^FitzRoy]: Up-to-date information on data sources can be found on `fitzRoy`'s [documentation site](https://jimmyday12.github.io/fitzRoy/articles/fitzRoy.html#data-sources){target="_blank"}

[^CBAs]: Centre bounce attendances (CBAs) are a commonly-used metrics in AFL fantasy, coaches often look at tools such as [this one](https://dfsaustralia.com/afl-cbas/){target="_blank"} to help with researching their trades.

Where possible we will use the AFL Tables data set as it has the full history of the AFL on it. However if we require stats that it is missing, we will simply have to adopt a different data source and caveat it by saying it is only for a subset of the full history of the competition.


The `fetch_*` family of functions from the `fitzRoy` package allow us to read the package. Consult the [documentation site](https://jimmyday12.github.io/fitzRoy/reference/index.html){target="_blank"} for a complete list of all the available functions. Below we will get the data we need to answer our questions:

```{r}
#| eval: FALSE
player_stats <- fitzRoy::fetch_player_stats(season = 1897:2023)
results <- fitzRoy::fetch_results(season = 1897:2023)
```




::: {.callout-warning}

#### Being a good citizen

When sourcing data from `fitzRoy`, it is important to follow good data collection[^fitzRoy-good-practice] etiquette by only downloading the data you need and avoiding repeatedly downloading the same data over and over again. This prevents servers being overloaded and will mean everyone will get their data faster.

In keeping with this, for the purposes of this blog post, I have saved the data in a local RDS file instead of repeatedly calling the `fetch_*` functions, I use `readRDS()`. The code for this is below (and the code above is not actually run but is cleaner for demonstration purposes):

[^fitzRoy-good-practice]: this topic is discussed on the `fitzRoy` documentation site [here](https://jimmyday12.github.io/fitzRoy/articles/fitzRoy.html#good-practices){target="_blank"}

```{r}
if(file.exists("data/player_stats.RDS")) {
  player_stats <- readRDS("data/player_stats.RDS")
  
} else {
  player_stats <- fitzRoy::fetch_player_stats_afltables(season = 1897:2023)
  saveRDS(player_stats, "data/player_stats.RDS")
}

if(file.exists("data/results.RDS")) {
  results <- readRDS("data/results.RDS")
  
} else {
  results <- fitzRoy::fetch_results_afltables(season = 1897:2023)
  saveRDS(results, "data/results.RDS")
}

```

:::

The data we have read in is as at round `R tail(player_stats$Round, 1)` of the `R tail(player_stats$Season, 1)` AFL season.

## Finicky Details About Other R Packages

### Tidyverse Versus `data.table`

In the R community, there is an [ongoing power struggle](https://stackoverflow.com/questions/21435339/data-table-vs-dplyr-can-one-do-something-well-the-other-cant-or-does-poorly){target="_blank"} between using the Posit[^previously-RStudio]-backed [tidyverse](https://www.tidyverse.org/){target="_blank"} and the heavily-optimised [`data.table`](https://rdatatable.gitlab.io/data.table/){target="_blank"}.

[^previously-RStudio]: [formally known as RStudio](https://posit.co/blog/rstudio-is-becoming-posit/){target="_blank"} ([RIP](https://www.youtube.com/watch?v=TtMzTGfs-fc){target="_blank"})

As to not unsettle people who prefer either `dplyr` (and the tidyverse) or `data.table`, I have written code in both packages as to not alienate anyone[^base-r-dig]. Where relevant, I have used a tabbed layout for the convenience of the reader. As my personal preference for readability purposes is the tidyverse[^tidyverse-rationale], I will place this code in the first tab.


[^base-r-dig]: note that I have not written a `base` R dataframes version because I can see arguments for using both tidyverse and `data.table` but `base` R `data.frames` will probably cause more pain than they are worth (there is a reason that tidyverse and `data.table` exist)


[^tidyverse-rationale]: I will typically will only use `data.table` if the size of data necessitates it. In this case, the data is less than a million rows so there are no problems.

::: {.panel-tabset}

#### Tidyverse

Note that the code below is somewhat redundant as the `fitzRoy` package follows the [tidyverse philosophy](https://jimmyday12.github.io/fitzRoy/CONTRIBUTING.html){target="_blank"} and returns [tibbles](https://tibble.tidyverse.org/){target="_blank"}. However this is add the `_tb` suffix[^tb-abbreviation] to distinguish it from the `data.table` code.

```{r}
#| message: FALSE
player_stats_tb <- as_tibble(player_stats)
results_tb <- as_tibble(results)
```

[^tb-abbreviation]: an abbreviation of "tibble"


#### `data.table`

Henceforth, all `data.table` code will use the `_dt` suffix[^dt-abbreviation] as to distinguish it from the tidyverse code.

```{r}
#| message: FALSE
player_stats_dt <- as.data.table(player_stats)
results_dt <- as.data.table(results)
```

[^dt-abbreviation]: an acronym of "data.table"

:::


#### Adoption of the Native Pipe Operator (`|>`)

The so-called *pipe operator* (`%>%`) of the [`magrittr`](https://magrittr.tidyverse.org/){target="_blank"} package has been a core staple of tidyverse since its inception but since the R core team introduced the so-called *native pipe* (`|>`) to `base` R (in version [4.1](https://www.jumpingrivers.com/blog/new-features-r410-pipe-anonymous-functions/){target="_blank"}[^function-shorthand]), this has led to a split in adoption. There are some nuances in its usage[^future-pipe-post] but it overall behaves in a similar way to the `magrittr` pipe and has [less overhead (and is therefore faster)](https://stackoverflow.com/questions/67633022/what-are-the-differences-between-rs-new-native-pipe-and-the-magrittr-pipe){target="_blank"}. While the native pipe was initially missing some of the key features of the `magrittr` pipe, new features[^pipe-features] have been added to it that (in my mind) mean that it might have even surpassed the `magrittr` pipe.


While I have tried to appease people in both the tidyverse and `data.table` camps, I will not be re-writing my code more than once with such as minor syntactic difference as the pipe I use. I will therefore be dragging all my tidyverse-using readers kicking and screaming into the R 4.1 world by adopting the native pipe (`|>`) in my tidyverse code.

> Note that the common RStudio shortcut, `Ctrl+Shift+M` can be changed from the `magrittr` pipe (`%>%`), which is still the default, to the native pipe (`|>`).

[^function-shorthand]: another cool thing introduced in this version of R was so-called function shorthand (`\()`), see `help("function")` for more details

[^future-pipe-post]: I may even cover these in a future blog post

[^pipe-features]: In R version 4.2, the `_` symbol was added as a placeholder character and in R version 4.3, extractions using the `$` symbol are now allowed



### Webscraping package

While the majority of our data will be sourced using the `fitzRoy` package, a small amount of data (namely Norm Smith medalists, which are outside of the scope of `fitzRoy`) will require us to perform some bespoke web scraping. This will be performed using the `rvest` package (loaded [above](#cb1)).



# Figuring Out the Answers

In this section I will provide my working using R for each of the [aforementioned questions](#question-list). Where relevant, I will figure out where the [aforementioned infamous game](#a-concrete-example) places in the history of the AFL for that particular category.


## Preliminary Data Work


### Flattening the Data


To begin with, let's scrutinise the results data in order to figure out what we have to work with.


```{r}
str(results)
```


While inspecting the `results` we may note that certain key match-level information (e.g. quarter-by-quarter scores) for answering some of our question is missing from it. As it turns out, this data is actually available on the `player_stats_afl_tables` data (one row per player per match) instead. Thus, we will create a 'flattened' version of `player_stats_afl_tables` with all the match-level fields available to us on both datasets.


Now, let's take a look at the `player_stats_afl_tables` dataset to determine which fields are player-level and which are match-level.

::: {.panel-tabset}

#### Code


```{r}
#| eval: false
str(player_stats)
```

Note that the output has been placed into another tab as it is rather long.

#### Output

```{r}
#| echo: false
str(player_stats)
```

:::


Inspecting the fields and using some knowledge of the game, we can determine that the following fields are player-level:

```{r}
player_level_fields <- c(
  "First.name", "Surname", "ID", "Jumper.No.", "Playing.for", "Kicks", "Marks", 
  "Handballs", "Goals", "Behinds", "Hit.Outs", "Tackles", "Rebounds", "Inside.50s", 
  "Clearances", "Clangers", "Frees.For", "Frees.Against", "Brownlow.Votes", 
  "Contested.Possessions", "Uncontested.Possessions", "Contested.Marks", 
  "Marks.Inside.50", "One.Percenters", "Bounces", "Goal.Assists", "Time.on.Ground..",
  "Substitute"
  )

match_level_fields <- setdiff(colnames(player_stats), player_level_fields)

```

We can now safely group and aggregate by the `match_level_fields` below:


::: {.panel-tabset}

#### Tidyverse


```{r}
player_stats_tb |> 
  mutate(
    home_player = Playing.for == Home.team,
    away_player = Playing.for == Away.team
  ) |> 
  group_by(pick(all_of(match_level_fields))) |> 
  summarise(
    player_count = n(),
    home_kicks = sum(Kicks * home_player),
    away_kicks = sum(Kicks * away_player),
    home_marks = sum(Marks * home_player),
    away_marks = sum(Marks * away_player),
    home_handballs = sum(Handballs * home_player),
    away_handballs = sum(Handballs * away_player),
    home_hit_outs = sum(Hit.Outs * home_player),
    away_hit_outs = sum(Hit.Outs * away_player),
    home_tackles = sum(Tackles * home_player),
    away_tackles = sum(Tackles * away_player),
    home_rebounds = sum(Rebounds * home_player),
    away_rebounds = sum(Rebounds * away_player),
    home_inside_50s = sum(Inside.50s * home_player),
    away_inside_50s = sum(Inside.50s * away_player),
    home_clearances = sum(Clearances * home_player),
    away_clearances = sum(Clearances * away_player),
    home_clangers = sum(Clangers * home_player),
    away_clangers = sum(Clangers * away_player),
    home_frees_for = sum(Frees.For * home_player),
    away_frees_for = sum(Frees.For * away_player),
    home_frees_against = sum(Frees.Against * home_player),
    away_frees_against = sum(Frees.Against * away_player),
    home_contested_possessions = sum(Contested.Possessions * home_player),
    away_contested_possessions = sum(Contested.Possessions * away_player),
    home_uncontested_possessions = sum(Uncontested.Possessions * home_player),
    away_uncontested_possessions = sum(Uncontested.Possessions * away_player),
    home_contested_marks = sum(Contested.Marks * home_player),
    away_contested_marks = sum(Contested.Marks * away_player),
    home_marks_inside_50 = sum(Marks.Inside.50 * home_player),
    away_marks_inside_50 = sum(Marks.Inside.50 * away_player),
    home_one_percenters = sum(One.Percenters * home_player),
    away_one_percenters = sum(One.Percenters * away_player),
    home_bounces = sum(Bounces * home_player),
    away_bounces = sum(Bounces * away_player),
    home_goal_assists = sum(Goal.Assists * home_player),
    away_goal_assists = sum(Goal.Assists * away_player),
    .groups = "drop"
  ) |>
  arrange(Date, Local.start.time, Home.team) -> 
  match_stats_flat_tb

# verify correct number of games:
nrow(match_stats_flat_tb) == nrow(results_tb)
```

#### `data.table`


```{r}
match_stats_flat_dt <- copy(player_stats_dt)

match_stats_flat_dt[, home_player := Playing.for == Home.team]
match_stats_flat_dt[, away_player := Playing.for == Away.team]

match_stats_flat_dt <- match_stats_flat_dt[, .(
  player_count = .N,
  home_kicks = sum(Kicks * home_player),
  away_kicks = sum(Kicks * away_player),
  home_marks = sum(Marks * home_player),
  away_marks = sum(Marks * away_player),
  home_handballs = sum(Handballs * home_player),
  away_handballs = sum(Handballs * away_player),
  home_hit_outs = sum(Hit.Outs * home_player),
  away_hit_outs = sum(Hit.Outs * away_player),
  home_tackles = sum(Tackles * home_player),
  away_tackles = sum(Tackles * away_player),
  home_rebounds = sum(Rebounds * home_player),
  away_rebounds = sum(Rebounds * away_player),
  home_inside_50s = sum(Inside.50s * home_player),
  away_inside_50s = sum(Inside.50s * away_player),
  home_clearances = sum(Clearances * home_player),
  away_clearances = sum(Clearances * away_player),
  home_clangers = sum(Clangers * home_player),
  away_clangers = sum(Clangers * away_player),
  home_frees_for = sum(Frees.For * home_player),
  away_frees_for = sum(Frees.For * away_player),
  home_frees_against = sum(Frees.Against * home_player),
  away_frees_against = sum(Frees.Against * away_player),
  home_contested_possessions = sum(Contested.Possessions * home_player),
  away_contested_possessions = sum(Contested.Possessions * away_player),
  home_uncontested_possessions = sum(Uncontested.Possessions * home_player),
  away_uncontested_possessions = sum(Uncontested.Possessions * away_player),
  home_contested_marks = sum(Contested.Marks * home_player),
  away_contested_marks = sum(Contested.Marks * away_player),
  home_marks_inside_50 = sum(Marks.Inside.50 * home_player),
  away_marks_inside_50 = sum(Marks.Inside.50 * away_player),
  home_one_percenters = sum(One.Percenters * home_player),
  away_one_percenters = sum(One.Percenters * away_player),
  home_bounces = sum(Bounces * home_player),
  away_bounces = sum(Bounces * away_player),
  home_goal_assists = sum(Goal.Assists * home_player),
  away_goal_assists = sum(Goal.Assists * away_player)
), by = match_level_fields]

setorder(match_stats_flat_dt, Date, Local.start.time, Home.team)

# verify outputs match:
identical(as.data.frame(match_stats_flat_tb), as.data.frame(match_stats_flat_dt))

```
:::

Henceforth, `player_stats_*` and `match_stats_flat_*` will be the two datasets we will use predominantly.

### IDs and URLs

One thing that our `match_stats_flat_*` dataset is currently lacking is a game ID for use as a primary key. In addition, being able to link directly to AFL tables when talking about particular game or players would be handy.

#### Game ID and URL

Let's tackle the game ID by writing some functions to an ID which also conveniently lines up with the way AFL Tables game URLs work (two birds with one stone). 


```{r}
team_code_map <- c(
  "Adelaide" = "01",
  "Brisbane Bears" = "02",
  "Carlton" = "03",
  "Collingwood" = "04",
  "Essendon" = "05",
  "Fitzroy" = "06",
  "Western Bulldogs" = "07",
  "Fremantle" = "08",
  "Geelong" = "09",
  "Hawthorn" = "10",
  "Melbourne" = "11",
  "North Melbourne" = "12",
  "Port Adelaide" = "13",
  "Richmond" = "14",
  "St Kilda" = "15",
  "Sydney" = "16",
  "University" = "17",
  "West Coast" = "18",
  "Brisbane Lions" = "19",
  "Gold Coast" = "20",
  "Greater Western Sydney" = "21"
)

# The three functions below are all vectorised for efficiency purposes
get_team_code <- function(team_name) {
 team_code_map[team_name]
}

get_game_id <- function(home_team_code, away_team_code, game_date) {
  # example ID: 161820230624
  game_date_string <- format(game_date, "%Y%m%d")
  
  ifelse(
    home_team_code > away_team_code, 
    # the smaller code is always first
    paste0(away_team_code, home_team_code, game_date_string),
    paste0(home_team_code, away_team_code, game_date_string)
    )
}

get_game_afltables_url <- function(game_id, season) {
  # example url: https://afltables.com/afl/stats/games/2023/161820230624.html
  paste0("https://afltables.com/afl/stats/games/", season,"/", game_id, ".html")
}


```

Now lets use these functions[^vectorisation-benefits] to add a primary key to our `match_stats_flat_*` datasets.

[^vectorisation-benefits]: Note that as the functions are vectorised, we need not use the slow `purrr::map*()` or `*apply()` family of functions to apply them to a column of our `tibble` and `data.table` respectively.

::: {.panel-tabset}

##### Tidyverse

```{r}
match_stats_flat_tb |> 
  mutate(
    home_team_code = get_team_code(Home.team),
    away_team_code = get_team_code(Away.team),
    game_id = get_game_id(home_team_code, away_team_code, Date),
    game_afltables_url = get_game_afltables_url(game_id, Season)
  ) |> 
  relocate(game_id, .before = Season) |> 
  arrange(game_id) ->
  match_stats_flat_tb

```

##### `data.table`

```{r}
match_stats_flat_dt[, home_team_code := get_team_code(Home.team)]
match_stats_flat_dt[, away_team_code := get_team_code(Away.team)]
match_stats_flat_dt[, game_id := get_game_id(home_team_code, away_team_code, Date)]
match_stats_flat_dt[, game_afltables_url := get_game_afltables_url(game_id, Season)]

setcolorder(match_stats_flat_dt, c("game_id", setdiff(names(match_stats_flat_dt), "game_id")))
setkey(match_stats_flat_dt, game_id)

# verify outputs match:
identical(as.data.frame(match_stats_flat_tb), as.data.frame(match_stats_flat_dt))
```

:::

#### Player URLs

In a similar way we can add a player URL to our `player_stats_*` datasets, we start by creating a mapping table.


::: {.panel-tabset}

##### Tidyverse

```{r}
# non-duplicate URL: https://afltables.com/afl/stats/players/E/Errol_Gulden.html
# duplicate URL: https://afltables.com/afl/stats/players/J/Josh_Kennedy0.html, https://afltables.com/afl/stats/players/J/Josh_Kennedy1.html
# for dealing with duplicates, for example Peter Brown (6 of the same name!) seems to have a nonsensical order
player_stats_tb |> 
  mutate(full_name = paste(First.name, Surname, sep = "_")) |> 
  distinct(ID, full_name) |> 
  group_by(full_name) |> 
  arrange(ID) |>
  mutate(
    instance_number = as.character(cumsum(rep(1L, n())) - 1L),
    dup_count = n()
  ) |> 
  mutate(
    number_suffix = if_else(dup_count == 1L, "", instance_number),
    first_letter = str_sub(full_name, 1, 1),
    player_afltables_url = paste0("https://afltables.com/afl/stats/players/", 
                                  first_letter, "/", full_name, number_suffix, ".html")
  ) |> 
  ungroup() |> 
  select(ID, player_afltables_url) ->
  player_url_tb

# player_url_map_tb <- `names<-`(player_url_tb$player_url, player_url_tb$ID)
```

##### `data.table`

```{r}
player_url_dt <- copy(player_stats_dt)

player_url_dt[, full_name := paste(First.name, Surname, sep = "_")]
player_url_dt <- unique(player_url_dt, by = c("ID", "full_name"))
setorder(player_url_dt, ID)
player_url_dt <- player_url_dt[, `:=`(
  instance_number = as.character(cumsum(rep(1L, .N)) - 1L),
  dup_count = .N
), "full_name"]

player_url_dt[, number_suffix := fifelse((dup_count == 1L), "", instance_number)]
player_url_dt[, first_letter := str_sub(full_name, 1, 1)]
player_url_dt[, player_afltables_url := paste0("https://afltables.com/afl/stats/players/", 
                                     first_letter, "/", full_name, number_suffix, ".html")]
player_url_dt <- player_url_dt[, .(ID, player_afltables_url)]
# player_url_map_dt <- `names<-`(player_url_dt$player_url, player_url_dt$ID)

# verify outputs match:
identical(as.data.frame(player_url_tb), as.data.frame(player_url_dt))
# identical(player_url_map_tb, player_url_map_dt)
```

:::

Now we can add add the game ID, game URL and player URL to the `player_stats_*` dataset.

::: {.panel-tabset}

##### Tidyverse

```{r}
player_stats_tb |> 
  mutate(
    home_team_code = get_team_code(Home.team),
    away_team_code = get_team_code(Away.team),
    game_id = get_game_id(home_team_code, away_team_code, Date),
  ) |> 
  left_join(match_stats_flat_tb |> select(game_id, game_afltables_url), by = "game_id") |> 
  left_join(player_url_tb, by = "ID") |> 
  relocate(game_id, ID, .before = Season) |>
  arrange(game_id, Playing.for, ID) ->
  player_stats_tb
```

##### `data.table`

```{r}
player_stats_dt[, home_team_code := get_team_code(Home.team)]
player_stats_dt[, away_team_code := get_team_code(Away.team)]
player_stats_dt[, game_id := get_game_id(home_team_code, away_team_code, Date)]

player_stats_dt <- merge(
  player_stats_dt, match_stats_flat_dt[, c("game_id", "game_afltables_url")], 
  by = "game_id")

player_stats_dt <- merge(player_stats_dt, player_url_dt, by = "ID")

setcolorder(player_stats_dt, c(c("game_id", "ID"), setdiff(names(player_stats_dt), c("game_id", "ID"))))
setkey(player_stats_dt, game_id, Playing.for, ID)
# verify outputs match:
identical(as.data.frame(player_stats_tb), as.data.frame(player_stats_dt))
```

:::




## Finding the Infamous Game

Let's use this new datasets to perform the simple exercise of obtaining the match ID for the [aforementioned](#a-concrete-example) Swans versus Eagles game.


::: {.panel-tabset}

#### Tidyverse

```{r}
(
  results_tb |> 
    filter(Season == 2023, Round == "R15", Home.Team == "Sydney", 
           Away.Team == "West Coast") |> 
    pull(Game) ->
    infamous_game_id_tb
)

```

#### `data.table`

```{r}
(
  infamous_game_id_dt <- results_dt[
    Season == 2023 & Round == "R15" & Home.Team == "Sydney" & 
      Away.Team == "West Coast", 
    Game
    ]
)

# confirming:
identical(infamous_game_id_tb, infamous_game_id_dt)

```

:::

We can henceforth use this game ID whenever relevant to rank the swans.


## Highest Scoring Quarter


::: {.panel-tabset}

### Tidyverse

Break down by

* Each quarter


```{r}
#| eval: FALSE
library(dplyr)
library(stringr)

player_stats_tb |> 
  group_by(
    Season, Round, Date, Local.start.time, Venue, Attendance, Home.team, 
    Away.team, Home.score, .data[["Away.score"]]
  ) |> 
  summarise(count = n())
results_tb <- as_tibble(results)
```




```{r}

player_stats_tb <- as_tibble(player_stats)
results_tb <- as_tibble(results)

# verify that it has the same number of rows as the results data.

```


### `data.table`

```{r}
#| message: FALSE
library(data.table)
player_stats_dt <- as.data.table(player_stats)
results_dt <- as.data.table(results)
```


:::

### Comparing to the Swans Eagles Game

While the swans scored heavily in the aforementioned game, it was not loaded so heavily in any particular so they are not really close to the highest scoring quarters. However, their third quarter score of 11 goals 5, 71 made it into the top ten of their highest scoring quarters. I actually didn't need to run any R code to find this out as there is a page on AFL tables that summarises quarter score records [here](https://afltables.com/afl/teams/swans/qh.html){targer = "_blank"}.


## Most Goal-kickers

URL structure:
https://afltables.com/afl/stats/games/YYYY/AABBYYYYMMDD.html

where AA and BB are the team codes for two teams (described below) playing in ascending order (not order of home and away)

e.g. https://afltables.com/afl/stats/games/1991/020419910803.html




### Individual

### Multiple

### Five or More (Bags)

## Most One-sided Games



## Most Clangers

Define clanger

## Worst Disposal Efficiency

Define disposal efficiency


## Youngest Norm Smith Medalist

Make the below a collapsible callout (some of it doesn't need to be)

This illustrates the fact that sometimes you need to stray outside of fitzRoy but it give most of the data you could ever want.

### Background

The norm smith medal is award to the player adjudged best a field (best on ground) in the Grand Final.

The Norm Smith was first instituted in 1979 and prior to this, there was no official award given. However there is a source someone has provided of who they (and the media of the day) adjudged as being.

While as a Western Australian, I would have no qualms with discarding the older, exclusively Victorian seasons, if not for the fact more data available is always nice (even if it is of more dubious quality).

Unofficial source of older data
https://themongrelpunt.com/footy-history/2020/04/30/before-the-norm-smith-best-on-ground-prior-to-1979/#:~:text=Robert%20Dipierdomenico%20was%20arguably%20best,the%2077%20Grand%20Final%20Replay.


For official norm smith which ever of the following are easier:

- https://www.afl.com.au/stats/leaders-awards/norm-smith-medal

- https://en.wikipedia.org/wiki/Norm_Smith_Medal#Recipients

Make sure it lines up with the AFL data.

Find the youngest player, player with least games

# Summary of Answers  (WORK IN PROGRESS)

Summarise by player, team player and season where relevant (grouped columns or potentially a tabbed layout if needed)

# Notable AFL Stats Figures

I will finish by listing some people who  are doing interesting work with AFL stats (often with heavy use of R and the `fitzRoy` package):

- [`fitzRoy`](https://github.com/jimmyday12/fitzRoy): as outlined in this article, this R package is the de facto way of sourcing AFL data.

- [Useless AFL Stats](https://www.facebook.com/uselessaflstats){target="_blank"}: a Facebook page which shares always interesting, sometimes abstract and often amusing AFL stats content. [Liam Crow](https://twitter.com/crow_data_sci){target="_blank"} is their data scientist and posts some interesting content of his own on his website: [https://www.crowdatascience.com](https://www.crowdatascience.com){target="_blank"}.

- [squiggle.com.au](https://squiggle.com.au/leaderboard/){target="_blank"}: displays a bunch of people's data-driven tipping models, many of which have websites and social media accounts where they do AFL stats.

- [Jaiden Popowski](https://twitter.com/jaiden_popowski){target="_blank"}: is prominent in the [AFL Fantasy](https://fantasy.afl.com.au/){target="_blank"} community for the interesting data-driven analysis he produces.

- [DFS Australia](https://dfsaustralia.com/afl-home/){target="_blank"}: has some great data-driven tools that provide insight on advanced stats commonly used in [AFL Fantasy](https://fantasy.afl.com.au/){target="_blank"}.

