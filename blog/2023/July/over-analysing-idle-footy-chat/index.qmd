---
title: "(Over-)Analysing Idle Footy Chat"
description: |
  This blog post discusses the types of questions one often posits while watching the footy (or indeed any sport). I will use this article as a medium through which I can introduce analysis of AFL data in R.
date: 2023-07-30
categories: 
  - Sport
  - AFL
  - R
  - Data
image: fitzroy-lions-logo.png
reference-location: margin
draft: false
freeze: false
reading-time: true
---


<!-- TODO: if need to change this in any way add a collapseable ammendments section in the form of a collapsable caution callout block with a bullet list with the date, a colon then a description of the change (e.g. fixed typos) -->

```{r hidden setup}
#| echo: false
#| message: false

library(reactable)
library(htmltools)
source("../../../../scripts/reactable-theming.R")


```

# Addemndum

Table with info and pros and cons of each data. Also if it is hit via api or web scraping (the fact it seems to fill in the gaps for footywire when it is older data).

Fryzigg seems to be the best unless you want live data and some of the most advanced stats (i.e. kick ins and CBAs).



Things I wish I had done from the beginning:

* Used fryzigg instead of AFL Tables (actually more complete).


# Prelude

Since antiquity (or at the very least living memory), sporting data has been recorded, published and analysed for almost every professional sport known to man. In the modern day of analytics and social media it has reached a point where sports statistics are constantly being recorded and opined on by teams, the press and your average punter alike. 

My beloved sport of *Australian Rules Football* (which I will henceforth refer to as "footy"[^footy]) is no different. Indeed some have even described the AFL (Australia's nation competition) as "the most data rich sport on Earth"[^data-rich-sport-source], although I would suggest that certain American sports such as baseball (i.e. [Moneyball](https://www.youtube.com/watch?v=PlKDQqKh03Y){target="_blank"}) have made far better use of their data.

[^footy]: As a Western Australian this is how I define it (along with the majority of Australia) but I am aware that this term is reserved for rugby league in New South Wales and Queensland
[^data-rich-sport-source]: [Source](https://www.youtube.com/watch?v=i_mePwh_02M){target="_blank"}


It is my observation that it is common for those watching or attending live footy to ask questions such as:

> What is the record for the most *[statistical category]*?

or 

> When was the last time *[obscure event]* happened?

I believe a contributor to this is that we are emulating what we hear on the broadcast commentary. The difference is that they often have a team of  [computer-type boffins](https://www.youtube.com/clip/UgkxvNk03iqKigc9NKMjWOs2NvuRFRY8xRHn){target="_blank"}[^video-link-disclaimer] behind the scenes feeding them the answer. 

[^video-link-disclaimer]: The video linked here is unfortunately clipped from an American guy who kind of missed the point a bit, but it is also the highest quality clip I could find of this brilliant piece of commentary from BT ([Brian Taylor](https://www.youtube.com/watch?v=E_JCdK4ah78){target="_blank"} for the uninitiated).

> But what are us plebeians meant to do, bereft of such luxuries you might ask?

Well, a quick Google search will make short work of questions of a more trivial nature such as "which player has kicked the most career goals"[^tony-lockett] or "which team has won the most premierships"[^most-premierships]. The more savvy among us may find answers to slightly more edifying questions by performing pro gamer moves such as

* Trawling through more obscure websites such as [AFL Tables](https://afltables.com/afl/afl_index.html){target="_blank"}[^baseball-reference] to answer things like "what is the most disposal Zac Dawson had in a game"[^zac-dawson]; or

* Digging into the deep recesses of the AFL Live App to answer questions like "what is the record for the longest distance run in a game"[^telstra-tracker]

but some questions will still go unanswered.

[^baseball-reference]: the [baseball/basketball reference](https://www.sports-reference.com/){target="_blank"} of the footy world (but maybe not quite as extensive)


```{r}
#| echo: false
tippy::tippy_this(elementId = "distance-image", tooltip = 'Also called <img src="longest-distance.jpg" title="Scully dominates!" class="img-fluid"> distribution.')

```


[^zac-dawson]: [19](https://afltables.com/afl/stats/players/Z/Zac_Dawson.html#sortableTable2){target="_blank"}, [versus Melbourne in round 10 2009](https://afltables.com/afl/stats/games/2009/111520090530.html){target="_blank"}

[^telstra-tracker]: [Tom Scully, 18.9 KM]{id='distance-image'}

[^tony-lockett]: [Tony Lockett on 1360](https://en.wikipedia.org/wiki/List_of_VFL/AFL_records#Goalkicking){target="_blank"}

[^most-premierships]: [Carlton and Essendon tied on 16](https://en.wikipedia.org/wiki/List_of_VFL/AFL_records#Premierships){target="_blank"}

However if you are a [gadget-type operator](https://www.youtube.com/clip/UgkxtEJxG9BEEvFMmGfpjSBWc4MtWPKwNTLW){target="_blank"}[^tipping-name] like myself, you will expand the number of footy stats questions you can answer immensely by accessing and manipulating the raw data yourself. There are of course a multitude of tools and approaches to this but in this post, I will be using R (my preferred programming language).

[^tipping-name]: My footy tipping username is *Gadget-type Operator* and I often use other [BT quotes](https://www.youtube.com/watch?v=E_JCdK4ah78){target="_blank"} for my username on other (even non-footy-related) accounts

::: {.callout-caution collapse="true"}


## Apologies for the delay

I have been promising some people that this (my first) post will be "coming soon" for quite some time now. It has finally arrived and the main reasons for slowness are:

* Am a slow writer. I often have all the ideas in my head but when it comes to putting them into nice publishable words, it become a bit of a slog.

* The scope of this project expanded as I kept on branching off from the main mission in order provide additional background.


The R code and analysis itself did not take long at all, so the main areas I am looking to improve in the future are my writing efficiency and keeping the scope of my blog posts under control. However, it would feel like going against my style to avoid going down rabbit holes and off on tangents entirely, so there is still a balance to be struck there.

:::

## Target Audience Unclear

> If you are a footy fan this article will likely present as some mildy interesting footy facts, combined with incomprehensible techno-babble. For R users this will likely appear to be a fairly elementary data wrangling exercise, combined with a bunch of references you don't understand. But if you are both a footy fan and an R user, it will hopefully prove to be a quite interesting read. 

# A concrete example

I recently had the misfortune (as a West Coast fan) of attending a game live between the Sydney Swans and (not so) mighty West Coast Eagles with the following scoreline:

![](swans-vs-eagles-score.png "How embarrassing!")

In one-sided games like this, it seems to me that footy stats questions become more common than usual for two key reasons:

1. It adds something interesting to a game that otherwise lacks excitement

2. These games are often filled with large statistical anomalies that might set new records

If we also consider that it was two actuaries talking, it is safe to say that footy stats questions were flying left, right and centre on that gloomy (but not because of the weather) Saturday night at the SCG. The questions we posed did not just vanish into the aether either, I (with the idea of writing this article in mind) decided to record the more interesting (and doable) questions.

## Question List

This article aims to tackle the questions listed below:

> 
- [What is the record for the highest scoring quarter?](#highest-scoring-quarter)
- [What is the record for the most individual goal kickers in a single game?](#individual)
- [What is the record for the most multiple goal kickers in a single game?](#multiple)
- [What is the record for the most players kicking five or more goals in a single game (i.e. the most "bags")?](#five-or-more-bags)
- [What is the record for the most clangers in a game?](#most-clangers)
- [What is the record for the worst disposal efficiency in a game?](#worst-disposal-efficiency)
- [Has anyone won a Norm Smith Medal in their first season in the AFL?](#youngest-norm-smith-medalist)
- What is the record for the most unanswered goals in a game?*
- What is the school with the most AFL players on their list?*
- What city/town has the most AFL players relative to population?*
- Which player has the best goals to behinds ratio?*
- Have there ever been any undefeated seasons?*
- What is the worst win-loss record to make finals?*


::: {.callout-note}

## Disclaimer on the asterisk

I have put an asterisk next to questions that either: 

* cannot easily be answered by the methods I discuss below; or
* are too lengthy for this blog post (these may get their own dedicated blog post in the future). 

The remaining questions (which have hyperlinks to later sections of this article) will be tackled using R below.

:::


If you are only really interested in the answers (and not the R coding), you can jump ahead by [clicking here](#summary-of-answers).




# Technical Background

## The `fitzRoy` Package

The first step in analysing AFL data is obtaining the data ("collection"). Our first thought might be to search the web for publicly available AFL datasets and APIs or even scrape the data from websites such as the [official AFL website](https://www.afl.com.au/){target="_blank"}, [Footywire](https://www.footywire.com/){target="_blank"} or [AFL Tables](https://afltables.com/afl/afl_index.html){target="_blank"}. But there is a more straight-forward way.


While most people now know Fitzroy as a trendy inner city suburb of Melbourne, filled with terraces and [over-priced croissants](https://www.lunecroissanterie.com/){target="_blank"}, it was once home[^bith-place] to the mighty  ([and now merged out of existence](https://en.wikipedia.org/wiki/Brisbane_Lions#Brisbane_Bears_absorb_Fitzroy_Football_Club's_AFL_operations,_become_Brisbane_Lions){target="_blank"}) Fitzroy Lions Football Club.
  
[![](fitzroy-lions-logo.png "La Marseillaise!")](https://www.youtube.com/watch?v=olKa-0H26k4){target="_blank"}

[^bith-place]: It is also (regrettably) the place of my birth but as a WA boy I don't like to talk about the fact that my parents happened to be in Melbourne when I was born.



We can obtain the data we need very simply using its name-sake, the `fitzRoy` R package. It abstracts away all the web scraping and API calls for us into a very helpful family of `fetch_*` functions.

So let's begin by loading the `fitzRoy` package and while we're at it, I will also load all the other packages I will be using.

```{r load packages}
#| message: FALSE
library(fitzRoy)

# Note that I generally avoid mixing dplyr and data.table at the same time
#   but the reason I have done with will become apparent later
library(dplyr)
library(data.table)

library(rvest)
library(stringr)
library(tidyr)
library(purrr)

library(reactable)
```




### `fitzRoy` Data Sources

`fitzRoy` provides access to a number of footy data sources[^FitzRoy] including [AFL Tables](https://afltables.com/){target="_blank"} and the [official AFL website](https://www.afl.com.au/fixture){target="_blank"}. Each data source has its own advantages and disadvantages, for example:

* [AFL Tables](https://afltables.com/){target="_blank"} has the entirety of AFL/VFL history (1897 to present) but lacks some of the more advanced stats.

* The [official AFL website](https://www.afl.com.au/fixture){target="_blank"} only has data from 2014 onwards but it also probably the most complete in terms of the advanced statistics it contains (e.g. centre bounce attendances[^CBAs]).

[^FitzRoy]: Up-to-date information on data sources can be found on `fitzRoy`'s [documentation site](https://jimmyday12.github.io/fitzRoy/articles/fitzRoy.html#data-sources){target="_blank"}

[^CBAs]: Centre bounce attendances (CBAs) are a commonly-used metrics in AFL fantasy, coaches often look at tools such as [this one](https://dfsaustralia.com/afl-cbas/){target="_blank"} to help with researching their trades.

Where possible we will use the AFL Tables data set as it has the full history of the AFL on it. However if we require stats that it is missing, we will simply have to adopt a different data source and caveat it by saying it is only for a subset of the full history of the competition.


The `fetch_*` family of functions from the `fitzRoy` package allow us to read the package. Consult the [documentation site](https://jimmyday12.github.io/fitzRoy/reference/index.html){target="_blank"} for a complete list of all the available functions.


For the purposes of the [questions listed above](#question-list) we will be using the full history of the AFL (1897 to present) using AFL Tables as a data source. We will also need disposal efficiency stats which are a more advanced statistic only available on the data from the official AFL Website and therefore only available from 2014 onwards.

We can *fetch* this data via `fitzRoy` with the following code:

```{r}
#| eval: FALSE
# AFL Tables has data for the full history of the AFL
player_stats <- fetch_player_stats_afltables(season = 1897:2023)
results <- fetch_results_afltables(season = 1897:2023)
# AFL.com.au data only goes back to 2014
player_stats_afl_official <-  map_dfr(2014:2023, fetch_player_stats_afl)
```

Note that in the code above we have to use a `map_dfr` to get data for multuple seasons, that is because the function will only do one season at a time, whereas we can obtain the AFL Tables all in one go with a vector of years. The reason for this is that the `fetch_player_stats_afl` uses an API to get the data  where as `fetch_player_stats_afl_tables` function pulls the data from a [GitHub repository](https://github.com/jimmyday12/fitzroy_data){target = "_blank"} where data obtained from a scraping script is automatically run over night via [GitHub actions](https://github.com/features/actions){target="_blank"} (a clever solution to prevent the actual site from being overloaded from too many scraping requests). This also means the `fetch_player_stats_afl` will be as at right now whereas `fetch_player_stats_afl_tables` data is updated as at the last time the code to scrape the data was run and AFL Tables updated their website. This also renders the `fetch_player_stats_afl` function slower than the `fetch_player_stats_afl_tables` as it actually has to hit an api and then perform some data manipulations as opposed to merely pulling data directly from GitHub storage.


::: {.callout-warning}

#### Being a good citizen

When sourcing data from `fitzRoy`, it is important to follow good data collection[^fitzRoy-good-practice] etiquette by only downloading the data you need and avoiding repeatedly downloading the same data over and over again. This prevents servers being overloaded and will mean everyone will get their data faster.

In keeping with this, for the purposes of this blog post, I have saved the data in a local RDS file instead of repeatedly calling the `fetch_*` functions, I use `readRDS()`. The code for this is below (and the code above is not actually run but is cleaner for demonstration purposes):

[^fitzRoy-good-practice]: this topic is discussed on the `fitzRoy` documentation site [here](https://jimmyday12.github.io/fitzRoy/articles/fitzRoy.html#good-practices){target="_blank"}

```{r}
if(file.exists("data/player_stats.RDS")) {
  player_stats <- readRDS("data/player_stats.RDS")
  
} else {
  player_stats <- fitzRoy::fetch_player_stats_afltables(season = 1897:2023)
  saveRDS(player_stats, "data/player_stats.RDS")
}

if(file.exists("data/results.RDS")) {
  results <- readRDS("data/results.RDS")
  
} else {
  results <- fitzRoy::fetch_results_afltables(season = 1897:2023)
  saveRDS(results, "data/results.RDS")
}

if(file.exists("data/player_stats_afl_official.RDS")) {
  player_stats_afl_official <- readRDS("data/player_stats_afl_official.RDS")
  
} else {
  player_stats_afl_official <-  map_dfr(2014:2023, fetch_player_stats_afl)
  saveRDS(player_stats_afl_official, "data/player_stats_afl_official.RDS")
}

```

:::

The data we have read in is as at round `R tail(player_stats$Round, 1)` of the `R tail(player_stats$Season, 1)` AFL season.

## Finicky Details About Other R Packages

### Tidyverse Versus `data.table`

In the R community, there is an [ongoing power struggle](https://stackoverflow.com/questions/21435339/data-table-vs-dplyr-can-one-do-something-well-the-other-cant-or-does-poorly){target="_blank"} between using the Posit[^previously-RStudio]-backed [tidyverse](https://www.tidyverse.org/){target="_blank"} and the heavily-optimised [`data.table`](https://rdatatable.gitlab.io/data.table/){target="_blank"}.

[^previously-RStudio]: [formally known as RStudio](https://posit.co/blog/rstudio-is-becoming-posit/){target="_blank"} ([RIP](https://www.youtube.com/watch?v=TtMzTGfs-fc){target="_blank"})

As to not unsettle people who prefer either `dplyr` (and the tidyverse) or `data.table`, I have written code in both packages as to not alienate anyone[^base-r-dig]. Where relevant, I have used a tabbed layout for the convenience of the reader. As my personal preference for readability purposes is the tidyverse[^tidyverse-rationale], I will place this code in the first tab.


[^base-r-dig]: note that I have not written a `base` R dataframes version because I can see arguments for using both tidyverse and `data.table` but `base` R `data.frames` will probably cause more pain than they are worth (there is a reason that tidyverse and `data.table` exist)


[^tidyverse-rationale]: I will typically will only use `data.table` if the size of data necessitates it. In this case, the data is less than a million rows so there are no problems.

::: {.panel-tabset}

#### Tidyverse

Note that the code below is somewhat redundant as the `fitzRoy` package follows the [tidyverse philosophy](https://jimmyday12.github.io/fitzRoy/CONTRIBUTING.html){target="_blank"} and returns [tibbles](https://tibble.tidyverse.org/){target="_blank"}. However this is add the `_tb` suffix[^tb-abbreviation] to distinguish it from the `data.table` code.

```{r}
#| message: FALSE
player_stats_tb <- as_tibble(player_stats)
results_tb <- as_tibble(results)
player_stats_afl_official_tb <- as_tibble(player_stats_afl_official)
```

[^tb-abbreviation]: an abbreviation of "tibble"


#### `data.table`

Henceforth, all `data.table` code will use the `_dt` suffix[^dt-abbreviation] as to distinguish it from the tidyverse code.

```{r}
#| message: FALSE
player_stats_dt <- as.data.table(player_stats)
results_dt <- as.data.table(results)
player_stats_afl_official_dt <- as.data.table(player_stats_afl_official)
```

[^dt-abbreviation]: an acronym of "data.table"

:::


#### Adoption of the Native Pipe Operator (`|>`)

The so-called *pipe operator* (`%>%`) of the [`magrittr`](https://magrittr.tidyverse.org/){target="_blank"} package has been a core staple of tidyverse since its inception but since the R core team introduced the so-called *native pipe* (`|>`) to `base` R (in version [4.1](https://www.jumpingrivers.com/blog/new-features-r410-pipe-anonymous-functions/){target="_blank"}[^function-shorthand]), this has led to a split in adoption. There are some nuances in its usage[^future-pipe-post] but it overall behaves in a similar way to the `magrittr` pipe and has [less overhead (and is therefore faster)](https://stackoverflow.com/questions/67633022/what-are-the-differences-between-rs-new-native-pipe-and-the-magrittr-pipe){target="_blank"}. While the native pipe was initially missing some of the key features of the `magrittr` pipe, new features[^pipe-features] have been added to it that (in my mind) mean that it might have even surpassed the `magrittr` pipe.


While I have tried to appease people in both the tidyverse and `data.table` camps, I will not be re-writing my code more than once with such as minor syntactic difference as the pipe I use. I will therefore be dragging all my tidyverse-using readers kicking and screaming into the R 4.1 world by adopting the native pipe (`|>`) in my tidyverse code.

> Note that the common RStudio shortcut, `Ctrl+Shift+M` can be changed from the `magrittr` pipe (`%>%`), which is still the default, to the native pipe (`|>`).

[^function-shorthand]: another cool thing introduced in this version of R was so-called function shorthand (`\()`), see `help("function")` for more details

[^future-pipe-post]: I may even cover these in a future blog post

[^pipe-features]: In R version 4.2, the `_` symbol was added as a placeholder character and in R version 4.3, extractions using the `$` symbol are now allowed



### Webscraping package

While the majority of our data will be sourced using the `fitzRoy` package, a small amount of data (namely Norm Smith medalists, which are outside of the scope of `fitzRoy`) will require us to perform some bespoke web scraping. This will be performed using the `rvest` package (loaded [above](#cb1)).



# Preliminary Data Wrangling


## Flattening the Data


To begin with, let's scrutinise the results data in order to figure out what we have to work with.


```{r}
str(results)
```


While inspecting the `results` we may note that certain key match-level information (e.g. quarter-by-quarter scores) for answering some of our question is missing from it. As it turns out, this data is actually available on the `player_stats_afl_tables` data (one row per player per match) instead. Thus, we will opt to create a 'flattened' version of `player_stats_afl_tables` with all the match-level fields available to us on both datasets and discard the `results` dataset (save for some quick checks to make sure the player data 'flattening' worked as expected).


Now, let's take a look at the `player_stats_afl_tables` dataset to determine which fields are player-level and which are match-level.

::: {.panel-tabset}

### Code


```{r}
#| eval: false
str(player_stats)
```

Note that the output has been placed into another tab as it is rather long.

### Output

```{r}
#| echo: false
str(player_stats)
```

:::


Inspecting the fields and using some knowledge of the game, we can determine that the following fields are player-level:

```{r}
player_level_fields <- c(
  "First.name", "Surname", "ID", "Jumper.No.", "Playing.for", "Kicks", "Marks", 
  "Handballs", "Goals", "Behinds", "Hit.Outs", "Tackles", "Rebounds", "Inside.50s", 
  "Clearances", "Clangers", "Frees.For", "Frees.Against", "Brownlow.Votes", 
  "Contested.Possessions", "Uncontested.Possessions", "Contested.Marks", 
  "Marks.Inside.50", "One.Percenters", "Bounces", "Goal.Assists", "Time.on.Ground..",
  "Substitute"
  )

match_level_fields <- setdiff(colnames(player_stats), player_level_fields)

```

We can now safely group and aggregate by the `match_level_fields` below:


::: {.panel-tabset}

### Tidyverse


```{r}
player_stats_tb |> 
  mutate(
    home_player = Playing.for == Home.team,
    away_player = Playing.for == Away.team
  ) |> 
  group_by(pick(all_of(match_level_fields))) |> 
  summarise(
    player_count = n(),
    home_kicks = sum(Kicks * home_player),
    away_kicks = sum(Kicks * away_player),
    home_marks = sum(Marks * home_player),
    away_marks = sum(Marks * away_player),
    home_handballs = sum(Handballs * home_player),
    away_handballs = sum(Handballs * away_player),
    home_hit_outs = sum(Hit.Outs * home_player),
    away_hit_outs = sum(Hit.Outs * away_player),
    home_tackles = sum(Tackles * home_player),
    away_tackles = sum(Tackles * away_player),
    home_rebounds = sum(Rebounds * home_player),
    away_rebounds = sum(Rebounds * away_player),
    home_inside_50s = sum(Inside.50s * home_player),
    away_inside_50s = sum(Inside.50s * away_player),
    home_clearances = sum(Clearances * home_player),
    away_clearances = sum(Clearances * away_player),
    home_clangers = sum(Clangers * home_player),
    away_clangers = sum(Clangers * away_player),
    home_frees_for = sum(Frees.For * home_player),
    away_frees_for = sum(Frees.For * away_player),
    home_frees_against = sum(Frees.Against * home_player),
    away_frees_against = sum(Frees.Against * away_player),
    home_contested_possessions = sum(Contested.Possessions * home_player),
    away_contested_possessions = sum(Contested.Possessions * away_player),
    home_uncontested_possessions = sum(Uncontested.Possessions * home_player),
    away_uncontested_possessions = sum(Uncontested.Possessions * away_player),
    home_contested_marks = sum(Contested.Marks * home_player),
    away_contested_marks = sum(Contested.Marks * away_player),
    home_marks_inside_50 = sum(Marks.Inside.50 * home_player),
    away_marks_inside_50 = sum(Marks.Inside.50 * away_player),
    home_one_percenters = sum(One.Percenters * home_player),
    away_one_percenters = sum(One.Percenters * away_player),
    home_bounces = sum(Bounces * home_player),
    away_bounces = sum(Bounces * away_player),
    home_goal_assists = sum(Goal.Assists * home_player),
    away_goal_assists = sum(Goal.Assists * away_player),
    .groups = "drop"
  ) |>
  arrange(Date, Local.start.time, Home.team) -> 
  match_stats_flat_tb

# verify correct number of games:
nrow(match_stats_flat_tb) == nrow(results_tb)
```

### `data.table`


```{r}
match_stats_flat_dt <- copy(player_stats_dt)

match_stats_flat_dt[, home_player := Playing.for == Home.team]
match_stats_flat_dt[, away_player := Playing.for == Away.team]

match_stats_flat_dt <- match_stats_flat_dt[, .(
  player_count = .N,
  home_kicks = sum(Kicks * home_player),
  away_kicks = sum(Kicks * away_player),
  home_marks = sum(Marks * home_player),
  away_marks = sum(Marks * away_player),
  home_handballs = sum(Handballs * home_player),
  away_handballs = sum(Handballs * away_player),
  home_hit_outs = sum(Hit.Outs * home_player),
  away_hit_outs = sum(Hit.Outs * away_player),
  home_tackles = sum(Tackles * home_player),
  away_tackles = sum(Tackles * away_player),
  home_rebounds = sum(Rebounds * home_player),
  away_rebounds = sum(Rebounds * away_player),
  home_inside_50s = sum(Inside.50s * home_player),
  away_inside_50s = sum(Inside.50s * away_player),
  home_clearances = sum(Clearances * home_player),
  away_clearances = sum(Clearances * away_player),
  home_clangers = sum(Clangers * home_player),
  away_clangers = sum(Clangers * away_player),
  home_frees_for = sum(Frees.For * home_player),
  away_frees_for = sum(Frees.For * away_player),
  home_frees_against = sum(Frees.Against * home_player),
  away_frees_against = sum(Frees.Against * away_player),
  home_contested_possessions = sum(Contested.Possessions * home_player),
  away_contested_possessions = sum(Contested.Possessions * away_player),
  home_uncontested_possessions = sum(Uncontested.Possessions * home_player),
  away_uncontested_possessions = sum(Uncontested.Possessions * away_player),
  home_contested_marks = sum(Contested.Marks * home_player),
  away_contested_marks = sum(Contested.Marks * away_player),
  home_marks_inside_50 = sum(Marks.Inside.50 * home_player),
  away_marks_inside_50 = sum(Marks.Inside.50 * away_player),
  home_one_percenters = sum(One.Percenters * home_player),
  away_one_percenters = sum(One.Percenters * away_player),
  home_bounces = sum(Bounces * home_player),
  away_bounces = sum(Bounces * away_player),
  home_goal_assists = sum(Goal.Assists * home_player),
  away_goal_assists = sum(Goal.Assists * away_player)
), by = match_level_fields]

setorder(match_stats_flat_dt, Date, Local.start.time, Home.team)

# verify outputs match:
identical(as.data.frame(match_stats_flat_tb), as.data.frame(match_stats_flat_dt))

```
:::

Henceforth, `player_stats_*` and `match_stats_flat_*` will be the two datasets we will use predominantly.

## IDs and URLs

One thing that our `match_stats_flat_*` dataset is currently lacking is a game ID for use as a primary key. In addition, being able to link directly to AFL tables when talking about particular game or players would be handy.

### Game ID and URL

Let's tackle the game ID by writing some functions to an ID which also conveniently lines up with the way AFL Tables game URLs work (two birds with one stone). 


```{r}
team_code_map <- c(
  "Adelaide" = "01",
  "Adelaide Crows" = "01",
  "Brisbane Bears" = "02",
  "Carlton" = "03",
  "Collingwood" = "04",
  "Essendon" = "05",
  "Fitzroy" = "06",
  "Western Bulldogs" = "07",
  "Fremantle" = "08",
  "Geelong" = "09",
  "Geelong Cats" = "09",
  "Hawthorn" = "10",
  "Melbourne" = "11",
  "North Melbourne" = "12",
  "Port Adelaide" = "13",
  "Richmond" = "14",
  "St Kilda" = "15",
  "Sydney" = "16",
  "Sydney Swans" = "16",
  "University" = "17",
  "West Coast" = "18",
  "West Coast Eagles" = "18",
  "Brisbane Lions" = "19",
  "Gold Coast" = "20",
  "Gold Coast Suns" = "20",
  "Greater Western Sydney" = "21",
  "GWS Giants" = "21"
)

# The three functions below are all vectorised for efficiency purposes
get_team_code <- function(team_name) {
 unname(team_code_map[team_name])
}

get_game_id <- function(home_team_code, away_team_code, game_date) {
  # example ID: 161820230624
  game_date_string <- format(game_date, "%Y%m%d")
  
  ifelse(
    home_team_code > away_team_code, 
    # the smaller code is always first
    paste0(away_team_code, home_team_code, game_date_string),
    paste0(home_team_code, away_team_code, game_date_string)
    )
}

get_game_afltables_url <- function(game_id, season) {
  # example url: https://afltables.com/afl/stats/games/2023/161820230624.html
  paste0("https://afltables.com/afl/stats/games/", season,"/", game_id, ".html")
}


```

Now lets use these functions[^vectorisation-benefits] to add a primary key to our `match_stats_flat_*` datasets.

[^vectorisation-benefits]: Note that as the functions are vectorised, we need not use the slow `purrr::map*()` or `*apply()` family of functions to apply them to a column of our `tibble` and `data.table` respectively.

::: {.panel-tabset}

#### Tidyverse

```{r}
match_stats_flat_tb |> 
  mutate(
    home_team_code = get_team_code(Home.team),
    away_team_code = get_team_code(Away.team),
    game_id = get_game_id(home_team_code, away_team_code, Date),
    game_afltables_url = get_game_afltables_url(game_id, Season)
  ) |> 
  relocate(game_id, .before = Season) |> 
  arrange(game_id) ->
  match_stats_flat_tb

```

#### `data.table`

```{r}
match_stats_flat_dt[, home_team_code := get_team_code(Home.team)]
match_stats_flat_dt[, away_team_code := get_team_code(Away.team)]
match_stats_flat_dt[, game_id := get_game_id(home_team_code, away_team_code, Date)]
match_stats_flat_dt[, game_afltables_url := get_game_afltables_url(game_id, Season)]

setcolorder(match_stats_flat_dt, c("game_id", setdiff(names(match_stats_flat_dt), "game_id")))
setkey(match_stats_flat_dt, game_id)

# verify outputs match:
identical(as.data.frame(match_stats_flat_tb), as.data.frame(match_stats_flat_dt))
```

:::

### Player URLs

In a similar way we can add a player URL to our `player_stats_*` datasets, we start by creating a mapping table.


::: {.panel-tabset}

#### Tidyverse

```{r}
# non-duplicate URL: https://afltables.com/afl/stats/players/E/Errol_Gulden.html
# duplicate URL: https://afltables.com/afl/stats/players/J/Josh_Kennedy0.html, https://afltables.com/afl/stats/players/J/Josh_Kennedy1.html
# for dealing with duplicates, for example Peter Brown (6 of the same name!) seems to have a nonsensical order
player_stats_tb |> 
  mutate(full_name = paste(First.name, Surname, sep = "_")) |> 
  distinct(ID, full_name) |> 
  group_by(full_name) |> 
  arrange(ID) |>
  mutate(
    instance_number = as.character(cumsum(rep(1L, n())) - 1L),
    dup_count = n()
  ) |> 
  mutate(
    number_suffix = if_else(dup_count == 1L, "", instance_number),
    first_letter = str_sub(full_name, 1, 1),
    player_afltables_url = paste0("https://afltables.com/afl/stats/players/", 
                                  first_letter, "/", full_name, number_suffix, ".html")
  ) |> 
  ungroup() |> 
  select(ID, player_afltables_url) ->
  player_url_tb

```

#### `data.table`

```{r}
player_url_dt <- copy(player_stats_dt)

player_url_dt[, full_name := paste(First.name, Surname, sep = "_")]
player_url_dt <- unique(player_url_dt, by = c("ID", "full_name"))
setorder(player_url_dt, ID)
player_url_dt <- player_url_dt[, `:=`(
  instance_number = as.character(cumsum(rep(1L, .N)) - 1L),
  dup_count = .N
), "full_name"]

player_url_dt[, number_suffix := fifelse((dup_count == 1L), "", instance_number)]
player_url_dt[, first_letter := str_sub(full_name, 1, 1)]
player_url_dt[, player_afltables_url := paste0("https://afltables.com/afl/stats/players/", 
                                     first_letter, "/", full_name, number_suffix, ".html")]
player_url_dt <- player_url_dt[, .(ID, player_afltables_url)]

# verify outputs match:
identical(as.data.frame(player_url_tb), as.data.frame(player_url_dt))
```

:::

Now we can add add the game ID, game URL and player URL to the `player_stats_*` dataset.

::: {.panel-tabset}

#### Tidyverse

```{r}
player_stats_tb <- as_tibble(player_stats) # copied from above

player_stats_tb |> 
  mutate(
    home_team_code = get_team_code(Home.team),
    away_team_code = get_team_code(Away.team),
    game_id = get_game_id(home_team_code, away_team_code, Date),
    player = paste0(First.name, " ", Surname, " (", Playing.for,")")
  ) |> 
  left_join(match_stats_flat_tb |> select(game_id, game_afltables_url), by = "game_id") |> 
  left_join(player_url_tb, by = "ID") |> 
  relocate(c("game_id", "player", "ID"), .before = Season) |>
  arrange(game_id, Playing.for, ID) ->
  player_stats_tb
```

#### `data.table`

```{r}
player_stats_dt <- as.data.table(player_stats) # copied from above

player_stats_dt[, home_team_code := get_team_code(Home.team)]
player_stats_dt[, away_team_code := get_team_code(Away.team)]
player_stats_dt[, game_id := get_game_id(home_team_code, away_team_code, Date)]
player_stats_dt[, player := paste0(First.name, " ", Surname, " (", Playing.for,")")]

player_stats_dt <- merge(
  player_stats_dt, match_stats_flat_dt[, c("game_id", "game_afltables_url")], 
  by = "game_id")

player_stats_dt <- merge(player_stats_dt, player_url_dt, by = "ID")

setcolorder(player_stats_dt, c(c("game_id", "player"), setdiff(names(player_stats_dt), c("game_id", "player"))))
setkey(player_stats_dt, game_id, Playing.for, ID)
# verify outputs match:
identical(as.data.frame(player_stats_tb), as.data.frame(player_stats_dt))
```

:::




## Finding the Infamous Game

Let's use these new datasets to perform the simple exercise of obtaining the game ID for the [aforementioned](#a-concrete-example) Swans versus Eagles game. We can henceforth use this game ID whenever relevant to rank the swans in the statistical category we investigate.

```{r}
(
  infamous_game_id <- get_game_id(
    home_team_code = get_team_code("Sydney"),
    away_team_code = get_team_code("West Coast"),
    game_date = as.Date("2023-06-24")
  )
)
```


We can then filter the data and present it below in a table below[^table-code-omitted].

[^table-code-omitted]: note that the code to format the table is omitted.

::: {.panel-tabset}

### Tidyverse

```{r}
#| eval: false
match_stats_flat_tb |> 
  filter(game_id == infamous_game_id) |> 
  reactable(
    # formatting code omitted
  ) 
```

### `data.table`

```{r}
#| eval: false
reactable(match_stats_flat_dt[game_id == infamous_game_id, ])# reactable formatting code omitted
```

:::

### Match Stats

```{r}
#| echo: false
match_stats_flat_tb |> 
  filter(game_id == infamous_game_id) |> 
  reactable_themed(
    columns = list(
      game_afltables_url = colDef(
        sticky = "right",
        cell = function(cell_value) {
          tags$a(href = cell_value, target = "_blank", "Game on AFL Tables")
        }
        )
      )
    )
```

### Player Stats

::: {.panel-tabset}

#### Tidyverse

```{r}
#| eval: false
player_stats_tb |> 
  filter(game_id == infamous_game_id) |> 
  reactable(
    # formatting code omitted
  ) 
```

#### `data.table`

```{r}
#| eval: false
reactable(player_stats_dt[game_id == infamous_game_id, ])# reactable formatting code omitted
```

:::


```{r}
#| echo: false 
player_stats_tb |>
  filter(game_id == infamous_game_id) |> 
  reactable_themed(
    columns = list(
      game_afltables_url = colDef(
        cell = function(cell_value) {
          tags$a(href = cell_value, target = "_blank", "Game on AFL Tables")
          }
        ),
      player_afltables_url = colDef(
        sticky = "right",
        cell = function(cell_value) {
          tags$a(href = cell_value, target = "_blank", "Player on AFL Tables")
        }
        ),
      player = colDef(sticky = "left")
      ),
    defaultPageSize = 5
  )

```



# Figuring Out the Answers

In this section I will provide my working using R for each of the [aforementioned questions](#question-list). Where relevant, I will figure out where the [aforementioned infamous game](#a-concrete-example) places in the history of the AFL for that particular category.

These provide examples of pathways you can go down, the permutations of stats you can look at and angles you can approach things from are endless. Also, the code I have written is probably more thorough an well-presented than how I would typically do it, often, when doing this with no intent on publishing (as I am doing here) my data manipulations will generally be far more ad-hoc and expedient (I will pay far less attention to reproducibility and consistent naming conventions).


## Highest Scoring Quarter

As listed [above](#question-list), our first question was:

> What is the record for the highest scoring quarter?

::: {.callout-info}

Not that there is already a [page](https://afltables.com/afl/teams/allteams/qh.html){target="_blank"} on this topic on AFL Tables, but it is a good one to start with regardless.

:::

To answer this question, we will first we should begin by creating a reshaped version of the  `match_stats_flat_*` dataset that is structured around quarters.


::: {.panel-tabset}

### Tidyverse


```{r}
#| message: FALSE
game_level_columns <- c("game_id", "game_afltables_url", "Season", "Round", "Venue", "Home.team", "Away.team", "Home.score", "Away.score")

match_stats_flat_tb |> 
  select(all_of(game_level_columns), starts_with("HQ"), starts_with("AQ")) |> 
  pivot_longer(cols = c(starts_with("HQ"), starts_with("AQ")), names_to = "quarter_gb", values_to = "gb_count") |>
  mutate(
    quarter = str_extract(quarter_gb, "\\d"),
    gb_label = if_else(str_detect(quarter_gb, "G$"), "goals", "behinds"),
    is_home_score = str_detect(quarter_gb, "^H")
    ) |>
  pivot_wider(id_cols = all_of(c(game_level_columns, "quarter", "is_home_score")), names_from = gb_label, values_from = gb_count) |>
  arrange(game_id, is_home_score, quarter) |> 
  group_by(game_id, is_home_score) |> 
  mutate(# make quarters incremental
    goals = c(head(goals, 1), diff(goals)),
    behinds = c(head(behinds, 1), diff(behinds))
  ) |> 
  ungroup() |> 
  mutate(
    score = goals * 6 + behinds,
    team = if_else(is_home_score, Home.team, Away.team),
    opposition = if_else(!is_home_score, Home.team, Away.team)
    ) |> 
  select(-is_home_score) -> quarter_stats_tb
  
```

### `data.table`

```{r}
#| message: FALSE
game_level_columns <- c("game_id", "game_afltables_url", "Season", "Round", "Venue", "Home.team", "Away.team", "Home.score", "Away.score")

quarter_stats_dt <- copy(match_stats_flat_dt)
quarter_stats_dt <- quarter_stats_dt[, .SD, .SDcols = names(quarter_stats_dt) %like% paste(
  paste(game_level_columns, collapse = "|"), "^HQ", "^AQ", 
  sep = "|")]
quarter_stats_dt <- melt(quarter_stats_dt, id.vars = game_level_columns, variable.name =  "quarter_gb", value.name = "gb_count")

quarter_stats_dt[, quarter := str_extract(quarter_gb, "\\d")]
quarter_stats_dt[, gb_label := fifelse(str_detect(quarter_gb, "G$"), "goals", "behinds")]
quarter_stats_dt[, is_home_score := str_detect(quarter_gb, "^H")]

quarter_stats_dt[, quarter_gb:=NULL]
quarter_stats_dt <- dcast(quarter_stats_dt, ... ~ gb_label, value.var = "gb_count")

# make quarters incremental
setorder(quarter_stats_dt, game_id, is_home_score, quarter)
quarter_stats_dt[, goals := c(head(goals, 1), diff(goals)), c("game_id", "is_home_score")]
quarter_stats_dt[, behinds := c(head(behinds, 1), diff(behinds)), c("game_id", "is_home_score")]

quarter_stats_dt[, score := goals * 6 + behinds]
quarter_stats_dt[, team := fifelse(is_home_score, Home.team, Away.team)]
quarter_stats_dt[, opposition := fifelse(!is_home_score, Home.team, Away.team)]

quarter_stats_dt <- quarter_stats_dt[, .SD, .SDcols = c(game_level_columns, c("quarter", "goals", "behinds", "score", "team", "opposition"))]

# verify outputs match:
identical(as.data.frame(quarter_stats_tb), as.data.frame(quarter_stats_dt))
```


:::

We will answer this question for each quarter (first, second, third and fourth), as well as overall. This means we we will be repeating the same process five times, so this calls for writing a function. The function will give us the top 5 scoring quarters, as well as ranking for the [aforementioned infamous game](#a-concrete-example) on the all time list of quarters.

::: {.panel-tabset}

#### Tidyverse

```{r}
get_top_quarter_scores_tb <- function(data, quarter_selection) {
  data |> 
    filter(quarter %in% quarter_selection) |>
    arrange(desc(score)) |> 
    mutate(rank = seq_along(team)) |> 
    filter(rank %in% 1:5 | (game_id == infamous_game_id & team == "Sydney")) |> 
    select(rank, team, opposition, score, quarter, Season, Round, Venue, game_afltables_url, game_id)
}
```


#### `data.table`

```{r}
get_top_quarter_scores_dt <- function(data, quarter_selection) {
  top_quarters_q1_dt <- copy(quarter_stats_dt)
  top_quarters_q1_dt <- top_quarters_q1_dt[
    quarter %in% quarter_selection, ]
  setorder(top_quarters_q1_dt, -score)
  top_quarters_q1_dt[, rank := seq_along(team)]
  top_quarters_q1_dt[rank %in% 1:5 | (game_id == infamous_game_id & team == "Sydney"), 
                     .(rank, team, opposition, score, quarter, Season, Round, Venue, game_afltables_url, game_id)]
}
```

:::


```{r}
#| echo: FALSE
top_quarters_reactable <- function(data) {
  data |> 
    reactable_themed(
      rowStyle = function(index) {
        data |> 
          slice(index) |> 
          pull(game_id) -> row_game_id
        if(row_game_id == infamous_game_id) {
          list(background = "red", color = "white")
          }
        },
      columns = list(
        game_afltables_url = colDef(
          name = "AFL Tables Link",
          sticky = "right",
          cell = function(cell_value, row_index) {
            tags$a(href = cell_value, target = "_blank", "🔗")
            }
        ),
        Season = colDef(show = FALSE),
        Round = colDef(
          cell = function(cell_value, row_index) {
            data |> 
              slice(row_index) |> 
              pull(Season) -> season
            paste("Round", cell_value, season)
          }
        ),
        rank = colDef(name = "Rank"),
        score = colDef(name = "Quarter Score"),
        team = colDef(name = "Team"),
        quarter = colDef(name = "Quarter"),
        opposition = colDef(name = "Oposition"),
        game_id = colDef(show = FALSE)
      )
    )
}
```



### First Quarter


::: {.panel-tabset}

#### Tidyverse

```{r}
top_quarter_scores_q1_tb <- get_top_quarter_scores_tb(quarter_stats_tb, 1L)
```


#### `data.table`

```{r}
top_quarter_scores_q1_dt <- get_top_quarter_scores_dt(quarter_stats_tb, 1L)
# verify outputs match:
identical(as.data.frame(top_quarter_scores_q1_tb), as.data.frame(top_quarter_scores_q1_dt))
```
:::


```{r}
#| echo: FALSE
top_quarters_reactable(top_quarter_scores_q1_tb)
```

The record for the highest-scoring first quarter occurred during the bloodbath of an encounter that was the game the Bombers first ever clash with the Gary Ablett Jr-led Gold Coast Suns in their inaugural season in the AFL. The Bombers came out of the blocks in a flash and mercilessly obliterated the inexperienced Gold Coast side, notching up a 93 point lead at quarter time. Interestingly, the Sun actually managed to win the second quarter as the bombers appeared to take there foot off the gas a little to *only* win by 139 points when all was said and done. 


```{=html}
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/ZPk_ao098ds" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
```


Perhaps the Suns' lethargy in the first quarter against the Dons can be explained as a hangover[^sun-festivities] following on from their [first ever win](https://afltables.com/afl/stats/games/2011/132020110423.html){target="_blank"} the previous week[^first-win]. It is exciting to me that this is a game that I can remember watching on the television at the time, it may have even been the first Gold Coast game I ever watched[^gold-coast]. Footy is full of narratives and it fun to spin one around this particular game (the context and stories make footy stats even more fun).

[^sun-festivities]: As a club with an abundance of 18 or 19 year old blokes living out of home for the first time, the Suns were known to [over-indulge](https://youtu.be/Roehqg0Dd5k?t=61){target="_blank"} in the Gold Coast party culture in those days.

[^first-win]: Courtesy of a [(missed) shot at goal after the siren](https://youtu.be/CbJMAHRzHEo?t=318){target="_blank"} from Justin Westhoff.

[^gold-coast]: And thank god I didn't give up on watching them after that (mainly due to Gary Ablett I will admit) because otherwise I would have missed *unbelievable goals* like [this](https://www.youtube.com/watch?v=2Ae5byjzUKg){target="_blank"}.



### Second Quarter


::: {.panel-tabset}

#### Tidyverse

```{r}
top_quarter_scores_q2_tb <- get_top_quarter_scores_tb(quarter_stats_tb, 2L)
```


#### `data.table`

```{r}
top_quarter_scores_q2_dt <- get_top_quarter_scores_dt(quarter_stats_tb, 2L)
# verify outputs match:
identical(as.data.frame(top_quarter_scores_q2_tb), as.data.frame(top_quarter_scores_q2_dt))
```
:::


```{r}
#| echo: FALSE
top_quarters_reactable(top_quarter_scores_q2_tb)
```

From one teams first season, to another's last. It is quite fitting (although a little sad) that the highest scoring second quarter was against a floundering ([aforementioned](#the-fitzroy-package)) `fitzRoy` Football Club (to which we owe the ease with which we obtained this data) en-route to a wooden spoon in their [final season](https://www.youtube.com/watch?v=Ykfsk0pXt9E){target="_blank"} prior to merging with Brisbane Bears to form the Brisbane Lions.

As I was not yet born, I do not remember the game, but on the video below, the commentator shrewdly points to a strong wind prevailing towards the Crows' goal at the beginning of the second quarter which certainly didn't bode well for the *Lions*.

```{=html}
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/sSKOcl03u3M" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
```


### Third Quarter

::: {.panel-tabset}

#### Tidyverse

```{r}
top_quarter_scores_q3_tb <- get_top_quarter_scores_tb(quarter_stats_tb, 3L)
```


#### `data.table`

```{r}
top_quarter_scores_q3_dt <- get_top_quarter_scores_dt(quarter_stats_tb, 3L)
# verify outputs match:
identical(as.data.frame(top_quarter_scores_q3_tb), as.data.frame(top_quarter_scores_q3_dt))
```
:::


```{r}
#| echo: FALSE
top_quarters_reactable(top_quarter_scores_q3_tb)
```

The Swans's third quarter appears in 28th position here, which is the best position it gets. The game on top, the Bombers had a very even distribution of goal-kickers and kicked 32 goals so they may appear later in our list of [multiple goal kickers question](#individual).


### Fourth Quarter


::: {.panel-tabset}

#### Tidyverse

```{r}
top_quarter_scores_q4_tb <- get_top_quarter_scores_tb(quarter_stats_tb, 4L)
```


#### `data.table`

```{r}
top_quarter_scores_q4_dt <- get_top_quarter_scores_dt(quarter_stats_tb, 4L)
# verify outputs match:
identical(as.data.frame(top_quarter_scores_q4_tb), as.data.frame(top_quarter_scores_q4_dt))
```
:::


```{r}
#| echo: FALSE
top_quarters_reactable(top_quarter_scores_q4_tb)
```


Well this was slightly unexpected, the Bloods[^incorrect-label] came home like a freight train against the woeful Saints in a game that took place over 100 years ago. It is also the only quarter in AFL history that has notched up a ton. Upon seeing this, given it's vintage, I though that perhaps the story of this game might have been lost to time but the Swans to have a most [insightful article](https://www.sydneyswans.com.au/news/235004/slaughter-the-true-story-behind-a-record-thats-stood-for-a-century){target="_blank"} up on their website about it. The explanation it provides is that St Kilda were undermanned through a combination of injury and player protest on account of off-field disputes. It is safe to say that the "Bloods" showed them no mercy.

[^incorrect-label]: Incorrectly labelled here as "Sydney" in the table above because at the time they resided in South Melbourne (they [relocated to Sydney in 1982](https://en.wikipedia.org/wiki/Sydney_Swans#Swans_move_to_Sydney:_1982.E2.80.931984){target="_blank"}), they were also known as the "Bloods" prior to adopting their current [Swans mascot in 1933](https://en.wikipedia.org/wiki/Sydney_Swans#Club_identity){target="_blank"} due to the number of Western Australians in the side (as a WA boy I couldn't help mentioning this)

### All Quarters


::: {.panel-tabset}

#### Tidyverse

```{r}
top_quarter_scores_tb <- get_top_quarter_scores_tb(quarter_stats_tb, 1L:4L)
```


#### `data.table`

```{r}
top_quarter_scores_dt <- get_top_quarter_scores_dt(quarter_stats_tb, 1L:4L)
# verify outputs match:
identical(as.data.frame(top_quarter_scores_tb), as.data.frame(top_quarter_scores_dt))
```
:::


```{r}
#| echo: FALSE
top_quarters_reactable(top_quarter_scores_tb)
```


In the infamous game, the Swan's third (premiership) quarter was the only one that reached the top 100 quarters of all time. The fact that no quarter was even close to the the top indicates that the swans were very consistent through-out the game. To use a cliche, they put in a consistent four-quarter effort and I support the Eagles were consistent too (consistently dismal).


## Most Goal-kickers

Three of the [aforementioned](#question-list) questions concern goal kickers. We can therefore write a function that can generalise our approach like we did for the previous question. 


These questions were:

> What is the record for the most individual goal kickers in a single game?

> What is the record for the most multiple goal kickers in a single game?

> What is the record for the most players kicking five or more goals in a single game (i.e. the most "bags")?

The Swans game appeared to have a rather even distribution of goal kickers in the infamous, so it will be interesting to see where it places on the all time list in this category.



::: {.panel-tabset}

### Tidyverse

```{r}
get_top_goal_scorers_tb <- function(data, min_goals) {
data |> 
  mutate(
    team = Playing.for,
    opposition = if_else(team == Home.team, Away.team, Home.team)
  ) |> 
  group_by(team, opposition, Season, Round, Venue, game_afltables_url, game_id, Date) |> 
  summarise(
    goal_kickers = sum(Goals > min_goals),
    .groups = "drop"
  ) |> 
  arrange(desc(goal_kickers), desc(Date)) |> 
  mutate(rank = seq_along(game_id)) |> 
  relocate(rank, .before = "team") |> 
  relocate(goal_kickers, .before = "Season") |> 
  filter(rank %in% 1:5|(game_id == infamous_game_id & team == "Sydney")) |>
  select(-Date)
}

```




### `data.table`

```{r}
get_top_goal_scorers_dt <- function(data, min_goals) {
  top_goal_scorers_dt <- copy(data)
  top_goal_scorers_dt[, team := Playing.for]
  top_goal_scorers_dt[, opposition := fifelse(team == Home.team, Away.team, Home.team)]
  
  top_goal_scorers_dt <- top_goal_scorers_dt[,.(goal_kickers = sum(Goals > min_goals)),
                                             c("team", "opposition", "Season", "Round", "Venue", 
                                               "game_afltables_url", "game_id", "Date")]
  setorder(top_goal_scorers_dt, -goal_kickers, -Date)
  top_goal_scorers_dt[, rank := seq_along(game_id)]
  
  
  top_goal_scorers_dt[rank %in% 1:5|(game_id == infamous_game_id & team == "Sydney"),
                      .(rank, team, opposition, goal_kickers, Season, Round, Venue, 
                        game_afltables_url, game_id)]
}
```

:::


```{r}
#| echo: FALSE
top_goal_scorers_reactable <- function(data, goal_kicker_label) {
  data |> 
    reactable_themed(
      rowStyle = function(index) {
        data |> 
          slice(index) |> 
          pull(game_id) -> row_game_id
        if(row_game_id == infamous_game_id) {
          list(background = "red", color = "white")
          }
        },
      columns = list(
        game_afltables_url = colDef(
          name = "AFL Tables Link",
          sticky = "right",
          cell = function(cell_value, row_index) {
            tags$a(href = cell_value, target = "_blank", "🔗")
            }
        ),
        Season = colDef(show = FALSE),
        Round = colDef(
          cell = function(cell_value, row_index) {
            data |>
              slice(row_index) |>
              pull(Season) -> season
            paste("Round", cell_value, season)
          }
        ),
        rank = colDef(name = "Rank"),
        goal_kickers = colDef(name = goal_kicker_label),
        team = colDef(name = "Team"),
        opposition = colDef(name = "Oposition"),
        game_id = colDef(show = FALSE)
      )
    )
}
```

### Individual

::: {.panel-tabset}

#### Tidyverse

```{r}
top_goal_scorers_single_tb <- get_top_goal_scorers_tb(player_stats_tb, 0L)
```


#### `data.table`

```{r}
top_goal_scorers_single_dt <- get_top_goal_scorers_dt(player_stats_dt, 0L)
# verify outputs match:
identical(as.data.frame(top_goal_scorers_single_tb), as.data.frame(top_goal_scorers_single_dt))
```

:::

```{r}
#| echo: FALSE
top_goal_scorers_reactable(top_goal_scorers_single_tb, "Individual Goal Kickers")
```


The record for most goal kickers is actually tied by multiple teams. The most recent time this happened was in the Bulldogs' 101 point drubbing of the Eagles last year[^eagles-bad]. The [infamous game](#a-concrete-example) is a bit off the pace in 238^th^ but 12 goal-kickers is still double a starting forward line.

[^eagles-bad]: Yet another example of how poorly the eagles have been done in 2022 and 2023



### Multiple


::: {.panel-tabset}

#### Tidyverse

```{r}
top_goal_scorers_multiple_tb <- get_top_goal_scorers_tb(player_stats_tb, 1L)
```


#### `data.table`

```{r}
top_goal_scorers_multiple_dt <- get_top_goal_scorers_dt(player_stats_dt, 1L)
# verify outputs match:
identical(as.data.frame(top_goal_scorers_multiple_tb), as.data.frame(top_goal_scorers_multiple_dt))
```

:::

```{r}
#| echo: FALSE
top_goal_scorers_reactable(top_goal_scorers_multiple_tb, "Multiple Goal Kickers")
```

The Swans game actually places equal 7th on the list of all time which is quite a notable result. It is also interesting that it was another one-sided Swans game[^swans-bombers] at the SCG that takes outright top spot. In that game (circa 1987) the human highlight reel [Warwick Capper](https://www.youtube.com/watch?v=iiYJ6FZWwv0){target="_blank"} led all comers for the Swans with a bag of 6 snags.

[^swans-bombers]: [Full game](https://www.youtube.com/watch?v=IR2AjhhNDzE){target="_blank"}, [article](https://www.sydneyswans.com.au/news/132940/footy-flashbacks-essendon){target="_blank"}

### Five or More (Bags)


::: {.panel-tabset}

#### Tidyverse

```{r}
top_goal_scorers_bags_tb <- get_top_goal_scorers_tb(player_stats_tb, 4L)
```


#### `data.table`

```{r}
top_goal_scorers_bags_dt <- get_top_goal_scorers_dt(player_stats_dt, 4L)
# verify outputs match:
identical(as.data.frame(top_goal_scorers_bags_tb), as.data.frame(top_goal_scorers_bags_dt))
```

:::

```{r}
#| echo: FALSE
top_goal_scorers_reactable(top_goal_scorers_bags_tb, "Bags")
```

Four bags in one game has happened on two occasions, the most recent of which (in 1991) yet again featured the Fitzroy lions, who were trounced by 157 points by the Hawks in North Hobart. 

The list of bag-getters in this game makes for interesting reading, all were recognisable names (although one more for his family connections that his own merit). As one might expect, one of the bags was courtesy of Hawthorn spearhead Jason Duntall (6 snags), along with 7 a piece from WA boy Ben Allan[^ben-allan] and the three-time premiership player Darren Jarmon. Rounding out the 4 was a contribution of 5 snags from Paul Hudson, who is the son of Tasmanian footy legend Peter Hudson (how fitting that this game was played in Tassie) who average more than 5 goals a game himself (an incredible feat).

[^ben-allan]: Sorry I couldn't help myself, he was also a [Claremont Tiger](https://www.claremontfc.com.au/){target="_blank"} (up the mighty Tiges)


## Questions About Questionable Disposal

Two of the [questions](#question-list) concerned clangers and disposal efficiency:

> What is the record for the most clangers in a game?

> What is the record for the worst disposal efficiency in a game?

These statistics (which we will define below) are more advanced and have only been recorded more recently, so we will therefore have to check which 

### Most Clangers


A clanger is defined as

> an absurd or embarrassing blunder.

Or in more precise football statistics terms

> An error made by a player resulting in a negative result for his side. Disposal clangers are any kick or handball that directly turns the ball over to the opposition. Frees and 50-metre penalties against, No Pressure Errors, Dropped Marks and Debits are all included in clangers.[^source-champion-data]

[^source-champion-data]: [Source (Champion Data)](https://www.championdata.com/glossary/afl){target-blank}


::: {.panel-tabset}

#### Tidyverse

```{r}

```


#### `data.table`

```{r}

```

:::


### Worst Disposal Efficiency

Disposal efficiency is

> the percentage of disposals that are effective.[^source-champion-data]

Where effective disposal is any of

> * Effective handball: a handball to a teammate that hits the intended target.
  * Effective Short Kick: A kick of less than 40 metres that results in the intended target retaining possession. Does not include kicks that are spoiled by the opposition.
  * Effective Long Kick: A kick of more than 40 metres to a 50/50 contest or better for the team.[^source-champion-data]

Note that the distance of the disposal is an element of how lenient the definition of "effective" is.


This statistic requires our first (and only) use of the  [official AFL website](https://www.afl.com.au/){target="_blank"} as it is not present on the AFL Tables data. Thus we only have data for it from 2014 onwards.

We shall measure this by checking the most disposal with none effective being effective.

::: {.panel-tabset}

#### Tidyverse

```{r}
player_stats_fryzigg <- fitzRoy::fetch_player_stats_fryzigg(season = 2010:2023)

player_stats_fryzigg_all <- fitzRoy::fetch_player_stats_fryzigg(season = 1897:2023)


player_stats_fryzigg_all |> filter(!is.na(disposal_efficiency_percentage)) |> dim()
player_stats_fryzigg_all |> filter(!is.na(match_weather_type)) |> dim()

player_stats_fryzigg |> 
  mutate(
    home_team_code = get_team_code(match_home_team),
    away_team_code = get_team_code(match_away_team),
    season = str_sub(match_date, 1, 4),
    afl_tables_game_id = get_game_id(home_team_code, away_team_code, as.Date(match_date)),
    afl_tables_url = get_game_afltables_url(afl_tables_game_id, season)
  ) |> 
  select(afl_tables_game_id, match_weather_type) |> 
  distinct() -> match_stats_fryzigg_id



player_stats_afl_official_tb |> 
  filter(!is.na(player.player.player.playerId)) |> 
  mutate(
    home_team_code = get_team_code(home.team.name),
    away_team_code = get_team_code(away.team.name),
    season = str_sub(format(utcStartTime, format ="%y"), 1, 4),
    afl_tables_game_id = get_game_id(home_team_code, away_team_code, as.Date(utcStartTime)),
    afl_tables_url = get_game_afltables_url(afl_tables_game_id, season)
  ) -> player_stats_afl_official_id_tb

player_stats_afl_official_id_tb |> 
  group_by(season, afl_tables_url, afl_tables_game_id) |> 
  summarise(
    disposalEfficiency_game = sum(disposalEfficiency * disposals) / sum(disposals),
    .groups = "drop"
    ) |> 
  arrange(disposalEfficiency_game) |> 
  left_join(match_stats_fryzigg_id, by = "afl_tables_game_id")






```
The only game with less than 50% disposal efficiency was played in torrid conditions up in Cairns. Looking at the [video highlights](https://www.youtube.com/watch?v=VI4dCyLt82c){target="_blank}, the players were running through puddles the whole game. I have however seen equal or worse conditions in the past so it is somewhat curious that this was the worst by such a margin (for reference Gold Coast we very poor that year, coming second last but the Roos came in a respectible ninth position only one game outside the top 8, this also points to them probably winning this game if has been played in more favourable conditions but they still would have missed out on finals due to the mammoth percentage of the Cats that year). The "cleanest" player on the day was Jesse Joyce, who's 8 touches came at 75% efficiency (however it was a rather low sample size).

Seeing a game in 2018 is also a nice reminder of the last time the Eagles won a premiership which feels a long way off given the current predicament the club is in (in spit of their recent win against the also languishing Roos last Sunday).

In the 20th century, the use of suburban grounds where the quality of the surface was subpar I am sure lead to far more games with lower disposal efficiency than this (muddy fields were far more common in those days).

But we can't entirely blame the players, given the conditions the conditions. Anyone who has kick a footy around in the wet will know how much heavier and slipperier it can get, it is often described as being like a bar of soap. By looking through old highlights packages of the top two games,

#### `data.table`

```{r}

```

:::



## Youngest Norm Smith Medalist

Make the below a collapsible callout (some of it doesn't need to be)

This illustrates the fact that sometimes you need to stray outside of fitzRoy but it give most of the data you could ever want.

### Background

The norm smith medal is award to the player adjudged best a field (best on ground) in the Grand Final.

The Norm Smith was first instituted in 1979 and prior to this, there was no official award given. However there is a source someone has provided of who they (and the media of the day) adjudged as being.

While as a Western Australian, I would have no qualms with discarding the older, exclusively Victorian seasons, if not for the fact more data available is always nice (even if it is of more dubious quality).

Unofficial source of older data
https://themongrelpunt.com/footy-history/2020/04/30/before-the-norm-smith-best-on-ground-prior-to-1979/#:~:text=Robert%20Dipierdomenico%20was%20arguably%20best,the%2077%20Grand%20Final%20Replay.


For official norm smith which ever of the following are easier:

- https://www.afl.com.au/stats/leaders-awards/norm-smith-medal

- https://en.wikipedia.org/wiki/Norm_Smith_Medal#Recipients

Make sure it lines up with the AFL data.

Find the youngest player, player with least games



# Epilogue


## Summary of Answers

Summarise by player, team player and season where relevant (grouped columns or potentially a tabbed layout if needed)



Interestingly, the [aforementioned infamous game](#a-concrete-example) isn't the record-holder (or even in the top 5) for any of our questions but it was remarkable enough as only one of `r sum(match_stats_flat_dt$Home.score>=200)+sum(match_stats_flat_dt$Away.score>=200)` games where a team has scored 200 points or more which is notable enough I think, particularly given I had the (mis-)fortune of witnessing it in the flesh. Perhaps we could dig deeper to find a record it holds but I somehow find more satisfaction in it being a thought-provoking enough game to coax these questions out of us without it ever being the *answer*.

## Notable AFL Stats Figures

I will concluse by listing some people whoare doing interesting work with AFL stats (often with heavy use of R and the `fitzRoy` package) to provide further motivation:

- [`fitzRoy`](https://github.com/jimmyday12/fitzRoy): as outlined in this article, this R package is the de facto way of sourcing AFL data.

- [Useless AFL Stats](https://www.facebook.com/uselessaflstats){target="_blank"}: a Facebook page which shares always interesting, sometimes abstract and often amusing AFL stats content. [Liam Crow](https://twitter.com/crow_data_sci){target="_blank"} is their data scientist and posts some interesting content of his own on his website: [https://www.crowdatascience.com](https://www.crowdatascience.com){target="_blank"}.

- [squiggle.com.au](https://squiggle.com.au/leaderboard/){target="_blank"}: displays a bunch of people's data-driven tipping models, many of which have websites and social media accounts where they do AFL stats.

- [Jaiden Popowski](https://twitter.com/jaiden_popowski){target="_blank"}: is prominent in the [AFL Fantasy](https://fantasy.afl.com.au/){target="_blank"} community for the interesting data-driven analysis he produces.

- [DFS Australia](https://dfsaustralia.com/afl-home/){target="_blank"}: has some great data-driven tools that provide insight on advanced stats commonly used in [AFL Fantasy](https://fantasy.afl.com.au/){target="_blank"}.

